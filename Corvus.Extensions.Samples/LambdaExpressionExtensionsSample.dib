#!markdown

## Lambda Expression Extensions - Sample Notebook

#!markdown

### How to use .NET Interactive notebooks

In order to use .NET Interactive notebooks, download the .NET Interactive Notebooks extensions from the [marketplace](https://marketplace.visualstudio.com/items?itemName=ms-dotnettools.dotnet-interactive-vscode). 

You'll need to have the following pre-requisites installed:
 - Visual Studio Code (can be downloaded from [here](https://code.visualstudio.com/))
 - Install the latest [.NET 6 SDK](https://dotnet.microsoft.com/en-us/download/dotnet/6.0)

To run a notebook, open one of the files with the .dib extension in this repository. Select "Run All" from the top menu of the notebook to run all the cells, or run each cell individually by clicking on the "Execute Cell" button on the left of each cell.

#!markdown

## Examples

First, add a reference to the `Corvus.Extensions` NuGet package.

#!csharp

#r "nuget: Corvus.Extensions, 1.1.4"

using Corvus.Extensions;
using System.Linq.Expressions;

#!markdown

### ExtractPropertyName()

#!markdown

Extracts a property name from a lambda expression, throwing if that expression is not a `MemberExpression`.

#!csharp

Expression<Func<string, int>> getter = x => x.Length;

#!csharp

getter.ExtractPropertyName()

#!markdown

### GetMemberExpression()

#!markdown

Extracts a `MemberExpression` from a `LambdaExpression`, throwing if the body is not a `MemberExpression`.

#!csharp

getter.GetMemberExpression().Expression

//{ x: Type: System.String, NodeType: Parameter, Name: x, IsByRef: False, CanReduce: False }
