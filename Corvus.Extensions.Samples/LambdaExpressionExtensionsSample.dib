#!markdown

## Lambda Expression Extensions = Sample Notebook

#!markdown

First, add a reference to the `Corvus.Extensions` NuGet package.

#!csharp

#r "nuget: Corvus.Extensions, 1.1.4"

using Corvus.Extensions;
using System.Linq.Expressions;

#!markdown

### ExtractPropertyName()

#!markdown

public static string ExtractPropertyName(this LambdaExpression expression)
{
    if (expression is null)
    {
        throw new ArgumentNullException(nameof(expression));
    }

    MemberExpression memberExpression = GetMemberExpression(expression);

    return memberExpression.Member.Name;
}

#!csharp

Expression<Func<string, int>> getter = x => x.Length;

#!csharp

getter.ExtractPropertyName()

#!csharp

public class DbRow
{
    public string FirstName{ get; set; }
}

Expression<Func<DbRow, bool>> rowFilter = row => row.FirstName == "Ian";
Expression.Lambda(typeof(Func<DbRow, string>), ((BinaryExpression) rowFilter.Body).Left, Expression.Parameter(typeof(DbRow), "row")).ExtractPropertyName()

#!markdown

lambdaExpr.ExtractPropertyName();

#!markdown

// A parameter for the lambda expression.
ParameterExpression paramExpr = Expression.Parameter(typeof(int), "arg");

// This expression represents a lambda expression
// that adds 1 to the parameter value.
LambdaExpression lambdaExpr = Expression.Lambda(
    Expression.Add(
        paramExpr,
        Expression.Constant(1)
    ),
    new List<ParameterExpression>() { paramExpr }
);

// Print out the expression.
Console.WriteLine(lambdaExpr);

// Compile and run the lamda expression.
// The value of the parameter is 1.
Console.WriteLine(lambdaExpr.Compile().DynamicInvoke(1));

// This code example produces the following output:
//
// arg => (arg +1)
// 2
