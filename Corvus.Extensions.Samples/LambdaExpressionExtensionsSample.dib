#!markdown

## Lambda Expression Extensions = Sample Notebook

#!markdown

First, add a reference to the `Corvus.Extensions` NuGet package.

#!csharp

#r "nuget: Corvus.Extensions, 1.1.4"

using Corvus.Extensions;
using System.Linq.Expressions;

#!markdown

### ExtractPropertyName()

#!markdown

public static string ExtractPropertyName(this LambdaExpression expression)
{
    if (expression is null)
    {
        throw new ArgumentNullException(nameof(expression));
    }

    MemberExpression memberExpression = GetMemberExpression(expression);

    return memberExpression.Member.Name;
}

#!csharp

Expression<Func<string, int>> getter = x => x.Length;

#!csharp

getter.ExtractPropertyName()

#!csharp

public class DbRow
{
    public string FirstName{ get; set; }
}

Expression<Func<DbRow, bool>> rowFilter = row => row.FirstName == "Ian";
Expression.Lambda(typeof(Func<DbRow, string>), ((BinaryExpression) rowFilter.Body).Left, Expression.Parameter(typeof(DbRow), "row")).ExtractPropertyName()

#!markdown

### GetMemberExpression()

#!markdown

This extracts a property name from a lambda expression, throwing if that expression is not a `MemberExpression`.

#!csharp

getter.GetMemberExpression()
