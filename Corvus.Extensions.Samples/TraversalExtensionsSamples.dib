#!markdown

## Traversal Extensions - Sample Notebook

#!markdown

First, add a reference to the `Corvus.Extensions` NuGet package.

#!csharp

#r "nuget: Corvus.Extensions, 1.1.4"

using Corvus.Extensions;

#!markdown

### ForEachAsync()

#!markdown

public static int Add(int x)
{ 
    return x + 1;
}

Func<int> funcAdd;
funcAdd = Add;

int x;
Func<int> funcAddNumber = () => x+1 ;

#!csharp

public async Task<bool> isEqualToOne(int x)
{
    bool result = x.Equals(1);
    Console.WriteLine(result);
    return result;
}

Func<int, Task<bool>> funcIsEqualToOne = isEqualToOne;

#!csharp

var list = new List<int> { 1, 2, 3, 4, 5 };
await list.ForEachAsync<int>(isEqualToOne)
// method was useful when we didn't have async and await.

#!csharp

foreach (int x in list)
{
    await isEqualToOne(x);
}

#!markdown

## ForEachAtIndex<T>()

#!csharp

static void ConsolePrint(string s, int i)
{
    Console.WriteLine(i);
    Console.WriteLine(s);
}

Action<string, int> printAction = ConsolePrint;

#!csharp

IEnumerable<string> list = new List<string> { "foo", "bar", "quux" };
list.ForEachAtIndex<string>(printAction);

#!csharp

int i = 0;

foreach (string v in list)
{
    printAction(v, i++);
}
