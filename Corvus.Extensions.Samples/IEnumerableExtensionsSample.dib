#!markdown

## IEnumerableExtensions - Sample Notebook

#!markdown

### How to use .NET Interactive notebooks

In order to use .NET Interactive notebooks, download the .NET Interactive Notebooks extensions from the [marketplace](https://marketplace.visualstudio.com/items?itemName=ms-dotnettools.dotnet-interactive-vscode). 

You'll need to have the following pre-requisites installed:
 - Visual Studio Code (can be downloaded from [here](https://code.visualstudio.com/))
 - Install the latest [.NET 6 SDK](https://dotnet.microsoft.com/en-us/download/dotnet/6.0)

To run a notebook, open one of the files with the .dib extension in this repository. Select "Run All" from the top menu of the notebook to run all the cells, or run each cell individually by clicking on the "Execute Cell" button on the left of each cell.

#!markdown

## Examples

First, add a reference to the `Corvus.Extensions` NuGet package.

#!csharp

#r "nuget: Corvus.Extensions, 1.1.4"

using Corvus.Extensions;

#!markdown

### DistinctPreserveOrder()

#!markdown

This emits an enumerable of the distinct items in the target, preserving their original ordering.

The built-in LINQ operator [`Distinct`](https://learn.microsoft.com/en-us/dotnet/api/system.linq.enumerable.distinct?view=net-7.0#system-linq-enumerable-distinct-1(system-collections-generic-ienumerable((-0)))) can be used to return the distinct elements from a sequence. However, the [documentation](https://learn.microsoft.com/en-us/dotnet/api/system.linq.enumerable.distinct?view=net-7.0#system-linq-enumerable-distinct-1(system-collections-generic-ienumerable((-0)))) makes no guarantee about preserving the original ordering of the elements. 

#!csharp

var list = new List<int> { 1, 2, 3, 2, 4, 5, 6, 3 };
var result = list.DistinctPreserveOrder();

return result;

#!markdown

### DistinctBy()

#!markdown

This allows you to provide a function to provide the value for equality comparison for each item.

#!csharp

class SomeType
{
  public string Prop1 { get; set; }
  public int Prop2 { get; set; }
}

var list = new List<SomeType> { new SomeType { Prop1 = "Hello", Prop2 = 1 }, 
                                new SomeType { Prop1 = "Hello", Prop2 = 3 }, 
                                new SomeType { Prop1 = "World", Prop2 = 1 } };
var result = list.DistinctBy(i => i.Prop1);

return result;

#!markdown

### Concatenate()

#!markdown

This gives you the ability to concatenate mutiple enumerables, using the params pattern.

#!csharp

var list = new List<int> { 1, 2, 3 };
var list2 = new List<int> { 4, 5, 6 };
var list3 = new List<int> { 7, 8, 9 };
var list4 = new List<int> { 10, 11, 12 };

return list.Concatenate(list2, list3, list4);

#!markdown

### HasMinimumCount()

#!markdown

This determines whether the enumerable has at least a given number of items in it.

#!csharp

var list = new List<int> { 1, 2, 3 };

#!csharp

return list.HasMinimumCount(3);

#!csharp

return list.HasMinimumCount(4);

#!markdown

### AllAndAtLeastOne()

#!markdown

This is an efficient implementation of the built-in LINQ operators [Any()](https://learn.microsoft.com/en-us/dotnet/api/system.linq.enumerable.any?view=net-6.0) && [`All(predicate)`](https://learn.microsoft.com/en-us/dotnet/api/system.linq.enumerable.all?view=net-6.0) that avoids starting the enumeration twice. It determines if the collection is non-empty, and that every element also matches some predicate.

This method is also useful because of the counterintuitive behavior of `All()` with empty collections, whereby `items.All()` returns true if `items` is an empty collection. `items.AllAndAtLeastOne()` returns false if `items` is an empty collection, as one of the examples below shows. 

#!csharp

var list = new List<int> { 1, 2, 3 };
var list2 = new List<int>();

#!csharp

return list.AllAndAtLeastOne(i => i <= 3); // true

#!csharp

return list.AllAndAtLeastOne(i => i <= 2); // false

#!csharp

return list2.AllAndAtLeastOne(i => i <= 2); // false
