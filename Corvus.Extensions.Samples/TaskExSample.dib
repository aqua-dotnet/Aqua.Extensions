#!markdown

## TaskEx - Sample notebook

#!markdown

First, add a reference to the `Corvus.Extensions` NuGet package.

#!csharp

#r "nuget: Corvus.Extensions, 1.1.4"

#!markdown

Add using statement for `Corvus.Extensions` namespace

#!csharp

using System.IO;
using Corvus.Extensions;
using Corvus.Extensions.Tasks;

#!markdown

### WhenAllMany()

Passes the elements of a sequence to a callback that projects each element to a `Task<IEnumerable<T>>` and flattens the sequences produced by the resulting tasks into one `Task<IList<T>>`.

#!markdown

#### Examples

The following example uses `WhenAllMany` to asynchronously download all the OPML feeds in a set of feed collections and return a flattened collection of the results. An OPML feed is an XML file containing information like the title, description and link for each post on a given blog site.

#!csharp

using System;
using System.Net;
using System.Collections.Generic;
using System.Net.NetworkInformation;
using System.Net.Http;
using System.Threading;
using System.Threading.Tasks;

#!markdown

Create a record to represent a feed.

#!csharp

public record Feed(string Name, string Author, string Format, Uri Url);

#!markdown

Create a class to represent the result of a downloaded feed

#!csharp

public class FeedDownloadResult
{
    public string Content { get; set; }
    
    public HttpStatusCode StatusCode { get; set; }
}

#!markdown

Create a class to represent a collection of feeds

#!csharp

public class FeedCollection
{
    public FeedCollection(Feed[] feeds)
    {
        this.Feeds = feeds;
    }

    public IEnumerable<Feed> Feeds { get; private set; }
    
    public string Name { get; set; }

    public async Task<IEnumerable<FeedDownloadResult>> GetAllFeedsAsync()
    {
        List<Task<FeedDownloadResult>> feedTasks = new List<Task<FeedDownloadResult>>();
        foreach (Feed feed in this.Feeds)
        {
            Task<FeedDownloadResult> feedDownloadResult =  GetFeedAsync(feed);
            feedTasks.Add(feedDownloadResult);
        }
        FeedDownloadResult[] results = await Task.WhenAll(feedTasks).ConfigureAwait(false);
        return results;
    }

    private async Task<FeedDownloadResult> GetFeedAsync(Feed feed)
    {
        var request = new HttpRequestMessage(HttpMethod.Get, feed.Url);
        HttpClient client = new HttpClient();
        HttpResponseMessage response = await client.SendAsync(request).ConfigureAwait(false);

        return new FeedDownloadResult
        {
            Content = response.IsSuccessStatusCode ? await response.Content.ReadAsStringAsync() : null,
            StatusCode = response.StatusCode
        };
    }

}

#!markdown

Create an array of `FeedCollection` objects, each containing multiple `Feed` objects.

#!csharp

FeedCollection[] feedCollections = 
{
    new FeedCollection
    (
        new Feed[]
        {
            new Feed("Azure Weekly", "endjin", "RSS", new Uri("https://azureweekly.info/rss.xml")),
            new Feed("Power BI Weekly", "endjin", "RSS", new Uri("https://powerbiweekly.info/rss.xml"))
        }
    ),

    new FeedCollection
    (
        new Feed[]
        {
            new Feed("endjin.com", "endjin", "RSS", new Uri("https://endjin.com/rss.xml")),
            new Feed("Scott Hanselman Blog", "Scott Hanselman", "RSS", new Uri("http://feeds.feedblitz.com/scotthanselman"))
        }
    )
};

#!markdown

Define a function that takes a `FeedCollection` object and simply calls the `GetAllFeedsAsync` on it, which will return a `Task<IEnumerable<FeedDownloadResult>>`.

#!csharp

Func<FeedCollection, Task<IEnumerable<FeedDownloadResult>>> mapper = (feedCollection) => 
{
    return feedCollection.GetAllFeedsAsync();
};

#!markdown

Then call the `WhenAllMany` method, passing in our `Func` and the `FeedCollection[]` object defined earlier. As a result, each of the `FeedColection`s in `feedCollections` is going to passed to the `Func`, `mapper`, the resulting sequences produced by the multiple `Task<IEnumerable<FeedDownloadResult>>` will then be flattened into one `Task<IList<FeedDownloadResult>>`.

#!csharp

IList<FeedDownloadResult> result = await TaskEx.WhenAllMany<FeedCollection, FeedDownloadResult>(feedCollections, mapper);
return result[0].Content;
