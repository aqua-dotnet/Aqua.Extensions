#!markdown

## TaskExtensions - Sample notebook

#!markdown

First, add a reference to the `Corvus.Extensions` NuGet package.

#!csharp

#r "nuget: Corvus.Extensions, 1.1.4"

#!markdown

Add using statement for `Corvus.Extensions` namespace

#!csharp

using Corvus.Extensions;
using System;
using System.Collections.Generic;
using System.Net.NetworkInformation;
using System.Threading;
using System.Threading.Tasks;

#!markdown

### `CastWithConversion()`

Checks to see if a Task actually has a result and converts to a task of the relevant type.

#!markdown

#### Examples

#!csharp

string url = "www.contoso.com";
Ping png = new Ping();
var reply = png.Send(url);
Task task = Task.Run( () => {
            Ping ping = new Ping();
            PingReply reply = ping.Send(url);
            return reply;

});

#!csharp

Task<String> newTask = task.CastWithConversion<string>();

#!markdown

The above runs fine but it's not a meaningful example. Need to understand when you would want to use `CastWithConversion`.

Similar story for the example below.

#!csharp

class Base
{

}

class Derived : Base
{

}

#!markdown

The following cell returns an error:

#!csharp

Task t = Task.FromResult(new Derived());

Task<Base> tb = (Task<Base>)t;
tb.Result

#!markdown

While using `CastWithConversion<>()` allows us to cast the task to a base.

#!csharp

Task<Base> tb = t.CastWithConversion<Base>();
tb.Result

#!markdown

### `Cast()`

Casts from a `Task` to a `Task<T>`

#!markdown

#### Examples

#!csharp

string url = "www.contoso.com";
Ping png = new Ping();
var reply = png.Send(url);
Task task = Task.Run( () => {
            Ping ping = new Ping();
            PingReply reply = ping.Send(url);
            return reply;

});

#!csharp

Task<PingReply> newTask = task.Cast<PingReply>();
//return await task.CastWithConversion<int>();
