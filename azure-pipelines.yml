trigger:
  branches:
    include:
    - master
    - feature/*
  tags:
    include:
    - '*'

pool:
  vmImage: 'ubuntu-latest'

variables:

  BuildConfiguration: 'Release'
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
  IsPreRelease: ${{ ne(variables['GitVersion.PreReleaseTag'], '') }}
  SolutionToBuild: 'Solutions/Corvus.Extensions.sln'

steps:

- task: DotNetCoreInstaller@0
  displayName: 'Install .NET Core SDK 2.2.401 (Global Tools error workaround)'
  inputs:
    version: 2.2.401

# NB - In the future the GitVersion commands should be replaced with the GitVersion Azure DevOps task. However that task is currently unstable on Linux build agents.
#- task: gittools.gitversion.gitversion-task.GitVersion@5
#  displayName: 'GitVersion'
#  inputs:
#    preferBundledVersion: false

- task: DotNetCoreCLI@2
  displayName: 'Install GitVersion (Global Tools Linux Build Agent Workaround)'
  inputs:
    command: custom
    custom: 'tool'
    arguments: 'install -g GitVersion.Tool'

- script: 'dotnet-gitversion /output buildserver /nofetch' 
  displayName: 'Run GitVersion'

- task: DotNetCoreCLI@2
  displayName: 'Restore & Build'
  inputs:
    command: 'build'
    projects: $(SolutionToBuild)
    arguments: '--configuration $(BuildConfiguration) /p:Version=$(GitVersion.SemVer)'
    versioningScheme: byBuildNumber

- task: DotNetCoreCLI@2
  displayName: 'Run Executable Specifications'
  inputs:
    command: 'test'
    projects: $(SolutionToBuild)
    arguments: '-c $(BuildConfiguration) --no-restore /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura'
    nobuild: true

- script: |
    dotnet tool install -g dotnet-reportgenerator-globaltool
    reportgenerator "-reports:$(Build.SourcesDirectory)/**/**/coverage.cobertura.xml" "-targetdir:$(Build.SourcesDirectory)/CodeCoverage" "-reporttypes:HtmlInline_AzurePipelines;Cobertura"
  displayName: 'Generate Code Coverage Report'

- task: PublishCodeCoverageResults@1
  displayName: 'Publish Code Coverage Report'
  inputs:
    codeCoverageTool: Cobertura
    summaryFileLocation: '$(Build.SourcesDirectory)/CodeCoverage/Cobertura.xml'
    reportDirectory: '$(Build.SourcesDirectory)/CodeCoverage'

- task: DotNetCoreCLI@2
  displayName: 'Create NuGet Packages'
  inputs:
    command: 'pack'
    projects: $(SolutionToBuild)
    packDirectory: '$(Build.ArtifactStagingDirectory)/packages/$(Build.BuildID)'
    nobuild: true
    versioningScheme: byEnvVar
    versionEnvVar: GitVersion.SemVer

- task: PublishBuildArtifacts@1
  displayName: 'Publish Artifact: Drop'
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)'

- task: DotNetCoreCLI@2
  displayName: 'Publish to nuget.org'
  condition: and(succeeded(), or(variables['Endjin.ForcePublish'], and(eq(variables['Build.SourceBranch'], 'refs/heads/master'), eq(variables['GitVersion.PreReleaseTag'], ''))))
  inputs:
    command: push
    nuGetFeedType: external
    publishFeedCredentials: 'corvus-dotnet-nuget-org'
    versioningScheme: byBuildNumber
    packagesToPush: '$(Build.ArtifactStagingDirectory)/**/*.nupkg;$(Build.ArtifactStagingDirectory)/**/*.snupkg'

- task: GithubRelease@0 
  displayName: 'Create GitHub Release'      
  condition: and(succeeded(), or(variables['Endjin.ForcePublish'], and(eq(variables['Build.SourceBranch'], 'refs/heads/master'), eq(variables['GitVersion.PreReleaseTag'], ''))))
  inputs:
    gitHubConnection: 'corvus-dotnet-github'
    repositoryName: 'corvus-dotnet/Corvus.Extensions'
    tagSource: manual
    tag: $(GitVersion.SemVer) 
    isPreRelease: $(IsPreRelease)
    assets: |
        $(Build.ArtifactStagingDirectory)/**/*.nupkg
        $(Build.ArtifactStagingDirectory)/**/*.snupkg