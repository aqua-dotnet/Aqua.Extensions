// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:3.0.0.0
//      SpecFlow Generator Version:3.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Aqua.Extensions.Specs.DateTimeFeatures
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("DateTimeExtensions")]
    public partial class DateTimeExtensionsFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "DateTimeExtensions.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "DateTimeExtensions", "\tIn order to perform common operations on dates and times\r\n\tAs a developer\r\n\tI wa" +
                    "nt a variety of extension methods to help me out", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("calculate the approximate difference between two identical date times")]
        public virtual void CalculateTheApproximateDifferenceBetweenTwoIdenticalDateTimes()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("calculate the approximate difference between two identical date times", null, ((string[])(null)));
#line 6
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Value"});
            table1.AddRow(new string[] {
                        "2011-04-15T13:45:26.1234"});
            table1.AddRow(new string[] {
                        "2011-04-15T13:45:26.1234"});
#line 7
 testRunner.Given("the following datetimes", ((string)(null)), table1, "Given ");
#line 11
 testRunner.When("I calculate the approximate difference between datetime 1 and datetime 2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 12
 testRunner.Then("the approximate difference should be \"less than a minute\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("calculate the approximate difference between two date times a minute apart")]
        public virtual void CalculateTheApproximateDifferenceBetweenTwoDateTimesAMinuteApart()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("calculate the approximate difference between two date times a minute apart", null, ((string[])(null)));
#line 14
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Value"});
            table2.AddRow(new string[] {
                        "2011-04-15T13:45:26.1234"});
            table2.AddRow(new string[] {
                        "2011-04-15T13:46:26.1234"});
#line 15
 testRunner.Given("the following datetimes", ((string)(null)), table2, "Given ");
#line 19
 testRunner.When("I calculate the approximate difference between datetime 1 and datetime 2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 20
 testRunner.Then("the approximate difference should be \"about one minute\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("calculate the approximate difference between two date times five minutes apart")]
        public virtual void CalculateTheApproximateDifferenceBetweenTwoDateTimesFiveMinutesApart()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("calculate the approximate difference between two date times five minutes apart", null, ((string[])(null)));
#line 22
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Value"});
            table3.AddRow(new string[] {
                        "2011-04-15T13:45:26.1234"});
            table3.AddRow(new string[] {
                        "2011-04-15T13:50:26.1234"});
#line 23
 testRunner.Given("the following datetimes", ((string)(null)), table3, "Given ");
#line 27
 testRunner.When("I calculate the approximate difference between datetime 1 and datetime 2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 28
 testRunner.Then("the approximate difference should be \"about 5 minutes\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("calculate the approximate difference between two date times 30 minutes apart")]
        public virtual void CalculateTheApproximateDifferenceBetweenTwoDateTimes30MinutesApart()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("calculate the approximate difference between two date times 30 minutes apart", null, ((string[])(null)));
#line 30
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Value"});
            table4.AddRow(new string[] {
                        "2011-04-15T13:45:26.1234"});
            table4.AddRow(new string[] {
                        "2011-04-15T14:15:26.1234"});
#line 31
 testRunner.Given("the following datetimes", ((string)(null)), table4, "Given ");
#line 35
 testRunner.When("I calculate the approximate difference between datetime 1 and datetime 2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 36
 testRunner.Then("the approximate difference should be \"about 30 minutes\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("calculate the approximate difference between two date times 45 minutes apart")]
        public virtual void CalculateTheApproximateDifferenceBetweenTwoDateTimes45MinutesApart()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("calculate the approximate difference between two date times 45 minutes apart", null, ((string[])(null)));
#line 38
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "Value"});
            table5.AddRow(new string[] {
                        "2011-04-15T13:45:26.1234"});
            table5.AddRow(new string[] {
                        "2011-04-15T14:30:26.1234"});
#line 39
 testRunner.Given("the following datetimes", ((string)(null)), table5, "Given ");
#line 43
 testRunner.When("I calculate the approximate difference between datetime 1 and datetime 2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 44
 testRunner.Then("the approximate difference should be \"about 45 minutes\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("calculate the approximate difference between two date times 1 hour apart")]
        public virtual void CalculateTheApproximateDifferenceBetweenTwoDateTimes1HourApart()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("calculate the approximate difference between two date times 1 hour apart", null, ((string[])(null)));
#line 46
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "Value"});
            table6.AddRow(new string[] {
                        "2011-04-15T13:45:26.1234"});
            table6.AddRow(new string[] {
                        "2011-04-15T14:45:26.1234"});
#line 47
 testRunner.Given("the following datetimes", ((string)(null)), table6, "Given ");
#line 51
 testRunner.When("I calculate the approximate difference between datetime 1 and datetime 2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 52
 testRunner.Then("the approximate difference should be \"about one hour\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("calculate the approximate difference between two date times 1.5 hour apart")]
        public virtual void CalculateTheApproximateDifferenceBetweenTwoDateTimes1_5HourApart()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("calculate the approximate difference between two date times 1.5 hour apart", null, ((string[])(null)));
#line 54
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "Value"});
            table7.AddRow(new string[] {
                        "2011-04-15T13:45:26.1234"});
            table7.AddRow(new string[] {
                        "2011-04-15T15:15:26.1234"});
#line 55
 testRunner.Given("the following datetimes", ((string)(null)), table7, "Given ");
#line 59
 testRunner.When("I calculate the approximate difference between datetime 1 and datetime 2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 60
 testRunner.Then("the approximate difference should be \"about 2 hours\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("calculate the approximate difference between two date times 2.5 hour apart")]
        public virtual void CalculateTheApproximateDifferenceBetweenTwoDateTimes2_5HourApart()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("calculate the approximate difference between two date times 2.5 hour apart", null, ((string[])(null)));
#line 62
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "Value"});
            table8.AddRow(new string[] {
                        "2011-04-15T13:45:26.1234"});
            table8.AddRow(new string[] {
                        "2011-04-15T16:15:26.1234"});
#line 63
 testRunner.Given("the following datetimes", ((string)(null)), table8, "Given ");
#line 67
 testRunner.When("I calculate the approximate difference between datetime 1 and datetime 2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 68
 testRunner.Then("the approximate difference should be \"about 2 hours\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("calculate the approximate difference between two date times 12 hours apart")]
        public virtual void CalculateTheApproximateDifferenceBetweenTwoDateTimes12HoursApart()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("calculate the approximate difference between two date times 12 hours apart", null, ((string[])(null)));
#line 70
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                        "Value"});
            table9.AddRow(new string[] {
                        "2011-04-15T13:45:26.1234"});
            table9.AddRow(new string[] {
                        "2011-04-16T01:45:26.1234"});
#line 71
 testRunner.Given("the following datetimes", ((string)(null)), table9, "Given ");
#line 75
 testRunner.When("I calculate the approximate difference between datetime 1 and datetime 2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 76
 testRunner.Then("the approximate difference should be \"about 12 hours\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("calculate the approximate difference between two date times 18 hours apart")]
        public virtual void CalculateTheApproximateDifferenceBetweenTwoDateTimes18HoursApart()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("calculate the approximate difference between two date times 18 hours apart", null, ((string[])(null)));
#line 78
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                        "Value"});
            table10.AddRow(new string[] {
                        "2011-04-15T13:45:26.1234"});
            table10.AddRow(new string[] {
                        "2011-04-16T07:45:26.1234"});
#line 79
 testRunner.Given("the following datetimes", ((string)(null)), table10, "Given ");
#line 83
 testRunner.When("I calculate the approximate difference between datetime 1 and datetime 2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 84
 testRunner.Then("the approximate difference should be \"about one day\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("calculate the approximate difference between two date times 22 hours apart")]
        public virtual void CalculateTheApproximateDifferenceBetweenTwoDateTimes22HoursApart()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("calculate the approximate difference between two date times 22 hours apart", null, ((string[])(null)));
#line 86
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                        "Value"});
            table11.AddRow(new string[] {
                        "2011-04-15T13:45:26.1234"});
            table11.AddRow(new string[] {
                        "2011-04-16T11:45:26.1234"});
#line 87
 testRunner.Given("the following datetimes", ((string)(null)), table11, "Given ");
#line 91
 testRunner.When("I calculate the approximate difference between datetime 1 and datetime 2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 92
 testRunner.Then("the approximate difference should be \"about one day\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("calculate the approximate difference between two date times 24 hours apart")]
        public virtual void CalculateTheApproximateDifferenceBetweenTwoDateTimes24HoursApart()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("calculate the approximate difference between two date times 24 hours apart", null, ((string[])(null)));
#line 94
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                        "Value"});
            table12.AddRow(new string[] {
                        "2011-04-15T13:45:26.1234"});
            table12.AddRow(new string[] {
                        "2011-04-16T13:45:26.1234"});
#line 95
 testRunner.Given("the following datetimes", ((string)(null)), table12, "Given ");
#line 99
 testRunner.When("I calculate the approximate difference between datetime 1 and datetime 2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 100
 testRunner.Then("the approximate difference should be \"about one day\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("calculate the approximate difference between two date times 26 hours apart")]
        public virtual void CalculateTheApproximateDifferenceBetweenTwoDateTimes26HoursApart()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("calculate the approximate difference between two date times 26 hours apart", null, ((string[])(null)));
#line 102
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                        "Value"});
            table13.AddRow(new string[] {
                        "2011-04-15T13:45:26.1234+01:00"});
            table13.AddRow(new string[] {
                        "2011-04-16T15:45:26.1234+01:00"});
#line 103
 testRunner.Given("the following datetimes", ((string)(null)), table13, "Given ");
#line 107
 testRunner.When("I calculate the approximate difference between datetime 1 and datetime 2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 108
 testRunner.Then("the approximate difference should be \"about one day\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("calculate the approximate difference between two date times 72 hours apart")]
        public virtual void CalculateTheApproximateDifferenceBetweenTwoDateTimes72HoursApart()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("calculate the approximate difference between two date times 72 hours apart", null, ((string[])(null)));
#line 110
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table14 = new TechTalk.SpecFlow.Table(new string[] {
                        "Value"});
            table14.AddRow(new string[] {
                        "2011-04-15T13:45:26.1234+01:00"});
            table14.AddRow(new string[] {
                        "2011-04-18T13:45:26.1234+01:00"});
#line 111
 testRunner.Given("the following datetimes", ((string)(null)), table14, "Given ");
#line 115
 testRunner.When("I calculate the approximate difference between datetime 1 and datetime 2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 116
 testRunner.Then("the approximate difference should be \"about 3 days\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("calculate the approximate difference between two date times 144 hours apart")]
        public virtual void CalculateTheApproximateDifferenceBetweenTwoDateTimes144HoursApart()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("calculate the approximate difference between two date times 144 hours apart", null, ((string[])(null)));
#line 118
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table15 = new TechTalk.SpecFlow.Table(new string[] {
                        "Value"});
            table15.AddRow(new string[] {
                        "2011-04-15T13:45:26.1234+01:00"});
            table15.AddRow(new string[] {
                        "2011-04-21T13:45:26.1234+01:00"});
#line 119
 testRunner.Given("the following datetimes", ((string)(null)), table15, "Given ");
#line 123
 testRunner.When("I calculate the approximate difference between datetime 1 and datetime 2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 124
 testRunner.Then("the approximate difference should be \"about 6 days\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("create chronological key from a date time using a suffix")]
        public virtual void CreateChronologicalKeyFromADateTimeUsingASuffix()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("create chronological key from a date time using a suffix", null, ((string[])(null)));
#line 126
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table16 = new TechTalk.SpecFlow.Table(new string[] {
                        "Value"});
            table16.AddRow(new string[] {
                        "2011-04-15T13:45:26.1234+01:00"});
            table16.AddRow(new string[] {
                        "2012-04-21T13:45:27.1234+01:00"});
            table16.AddRow(new string[] {
                        "2020-04-21T13:45:26.1234+01:00"});
            table16.AddRow(new string[] {
                        "2020-04-21T13:45:26.1235+01:00"});
#line 127
 testRunner.Given("the following datetimes", ((string)(null)), table16, "Given ");
#line 133
 testRunner.When("I create chronological keys for the date times with the suffix \'AppendMe\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table17 = new TechTalk.SpecFlow.Table(new string[] {
                        "Value"});
            table17.AddRow(new string[] {
                        "000634384683261234000-AppendMe"});
            table17.AddRow(new string[] {
                        "000634706091271234000-AppendMe"});
            table17.AddRow(new string[] {
                        "000637230699261234000-AppendMe"});
            table17.AddRow(new string[] {
                        "000637230699261235000-AppendMe"});
#line 134
 testRunner.Then("the the keys should be", ((string)(null)), table17, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("create chronological key from a date time with a uniqueid")]
        public virtual void CreateChronologicalKeyFromADateTimeWithAUniqueid()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("create chronological key from a date time with a uniqueid", null, ((string[])(null)));
#line 141
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table18 = new TechTalk.SpecFlow.Table(new string[] {
                        "Value"});
            table18.AddRow(new string[] {
                        "2011-04-15T13:45:26.1234+01:00"});
            table18.AddRow(new string[] {
                        "2012-04-21T13:45:27.1234+01:00"});
            table18.AddRow(new string[] {
                        "2020-04-21T13:45:26.1234+01:00"});
            table18.AddRow(new string[] {
                        "2020-04-21T13:45:26.1235+01:00"});
#line 142
 testRunner.Given("the following datetimes", ((string)(null)), table18, "Given ");
#line 148
 testRunner.When("I create chronological keys for the date times with a unique suffix", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table19 = new TechTalk.SpecFlow.Table(new string[] {
                        "Value"});
            table19.AddRow(new string[] {
                        "000634384683261234000-"});
            table19.AddRow(new string[] {
                        "000634706091271234000-"});
            table19.AddRow(new string[] {
                        "000637230699261234000-"});
            table19.AddRow(new string[] {
                        "000637230699261235000-"});
#line 149
 testRunner.Then("the the keys should match the following with a guid", ((string)(null)), table19, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("create chronological key stem without a suffix from a date time")]
        public virtual void CreateChronologicalKeyStemWithoutASuffixFromADateTime()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("create chronological key stem without a suffix from a date time", null, ((string[])(null)));
#line 156
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table20 = new TechTalk.SpecFlow.Table(new string[] {
                        "Value"});
            table20.AddRow(new string[] {
                        "2011-04-15T13:45:26.1234+01:00"});
            table20.AddRow(new string[] {
                        "2012-04-21T13:45:27.1234+01:00"});
            table20.AddRow(new string[] {
                        "2020-04-21T13:45:26.1234+01:00"});
            table20.AddRow(new string[] {
                        "2020-04-21T13:45:26.1235+01:00"});
#line 157
 testRunner.Given("the following datetimes", ((string)(null)), table20, "Given ");
#line 163
 testRunner.When("I create chronological key stems for the date times", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table21 = new TechTalk.SpecFlow.Table(new string[] {
                        "Value"});
            table21.AddRow(new string[] {
                        "000634384683261234000-"});
            table21.AddRow(new string[] {
                        "000634706091271234000-"});
            table21.AddRow(new string[] {
                        "000637230699261234000-"});
            table21.AddRow(new string[] {
                        "000637230699261235000-"});
#line 164
 testRunner.Then("the the keys should be", ((string)(null)), table21, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("create chronological key from a date time without a suffix")]
        public virtual void CreateChronologicalKeyFromADateTimeWithoutASuffix()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("create chronological key from a date time without a suffix", null, ((string[])(null)));
#line 171
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table22 = new TechTalk.SpecFlow.Table(new string[] {
                        "Value"});
            table22.AddRow(new string[] {
                        "2011-04-15T13:45:26.1234+01:00"});
            table22.AddRow(new string[] {
                        "2012-04-21T13:45:27.1234+01:00"});
            table22.AddRow(new string[] {
                        "2020-04-21T13:45:26.1234+01:00"});
            table22.AddRow(new string[] {
                        "2020-04-21T13:45:26.1235+01:00"});
#line 172
 testRunner.Given("the following datetimes", ((string)(null)), table22, "Given ");
#line 178
 testRunner.When("I create chronological keys for the date times", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table23 = new TechTalk.SpecFlow.Table(new string[] {
                        "Value"});
            table23.AddRow(new string[] {
                        "000634384683261234000"});
            table23.AddRow(new string[] {
                        "000634706091271234000"});
            table23.AddRow(new string[] {
                        "000637230699261234000"});
            table23.AddRow(new string[] {
                        "000637230699261235000"});
#line 179
 testRunner.Then("the the keys should be", ((string)(null)), table23, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("create reverse chronological key from a date time using a suffix")]
        public virtual void CreateReverseChronologicalKeyFromADateTimeUsingASuffix()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("create reverse chronological key from a date time using a suffix", null, ((string[])(null)));
#line 186
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table24 = new TechTalk.SpecFlow.Table(new string[] {
                        "Value"});
            table24.AddRow(new string[] {
                        "2011-04-15T13:45:26.1234+01:00"});
            table24.AddRow(new string[] {
                        "2012-04-21T13:45:27.1234+01:00"});
            table24.AddRow(new string[] {
                        "2020-04-21T13:45:26.1234+01:00"});
            table24.AddRow(new string[] {
                        "2020-04-21T13:45:26.1235+01:00"});
#line 187
 testRunner.Given("the following datetimes", ((string)(null)), table24, "Given ");
#line 193
 testRunner.When("I create reverse chronological keys for the date times with the suffix \'AppendMe\'" +
                    "", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table25 = new TechTalk.SpecFlow.Table(new string[] {
                        "Value"});
            table25.AddRow(new string[] {
                        "002520994292738765999-AppendMe"});
            table25.AddRow(new string[] {
                        "002520672884728765999-AppendMe"});
            table25.AddRow(new string[] {
                        "002518148276738765999-AppendMe"});
            table25.AddRow(new string[] {
                        "002518148276738764999-AppendMe"});
#line 194
 testRunner.Then("the the keys should be", ((string)(null)), table25, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("create reverse chronological key from a date time with a uniqueid")]
        public virtual void CreateReverseChronologicalKeyFromADateTimeWithAUniqueid()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("create reverse chronological key from a date time with a uniqueid", null, ((string[])(null)));
#line 201
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table26 = new TechTalk.SpecFlow.Table(new string[] {
                        "Value"});
            table26.AddRow(new string[] {
                        "2011-04-15T13:45:26.1234+01:00"});
            table26.AddRow(new string[] {
                        "2012-04-21T13:45:27.1234+01:00"});
            table26.AddRow(new string[] {
                        "2020-04-21T13:45:26.1234+01:00"});
            table26.AddRow(new string[] {
                        "2020-04-21T13:45:26.1235+01:00"});
#line 202
 testRunner.Given("the following datetimes", ((string)(null)), table26, "Given ");
#line 208
 testRunner.When("I create reverse chronological keys for the date times with a unique suffix", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table27 = new TechTalk.SpecFlow.Table(new string[] {
                        "Value"});
            table27.AddRow(new string[] {
                        "002520994292738765999-"});
            table27.AddRow(new string[] {
                        "002520672884728765999-"});
            table27.AddRow(new string[] {
                        "002518148276738765999-"});
            table27.AddRow(new string[] {
                        "002518148276738764999-"});
#line 209
 testRunner.Then("the the keys should match the following with a guid", ((string)(null)), table27, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("create reverse chronological key stem without a suffix from a date time")]
        public virtual void CreateReverseChronologicalKeyStemWithoutASuffixFromADateTime()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("create reverse chronological key stem without a suffix from a date time", null, ((string[])(null)));
#line 216
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table28 = new TechTalk.SpecFlow.Table(new string[] {
                        "Value"});
            table28.AddRow(new string[] {
                        "2011-04-15T13:45:26.1234+01:00"});
            table28.AddRow(new string[] {
                        "2012-04-21T13:45:27.1234+01:00"});
            table28.AddRow(new string[] {
                        "2020-04-21T13:45:26.1234+01:00"});
            table28.AddRow(new string[] {
                        "2020-04-21T13:45:26.1235+01:00"});
#line 217
 testRunner.Given("the following datetimes", ((string)(null)), table28, "Given ");
#line 223
 testRunner.When("I create reverse chronological key stems for the date times", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table29 = new TechTalk.SpecFlow.Table(new string[] {
                        "Value"});
            table29.AddRow(new string[] {
                        "002520994292738765999-"});
            table29.AddRow(new string[] {
                        "002520672884728765999-"});
            table29.AddRow(new string[] {
                        "002518148276738765999-"});
            table29.AddRow(new string[] {
                        "002518148276738764999-"});
#line 224
 testRunner.Then("the the keys should be", ((string)(null)), table29, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("create reverse chronological key from a date time without a suffix")]
        public virtual void CreateReverseChronologicalKeyFromADateTimeWithoutASuffix()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("create reverse chronological key from a date time without a suffix", null, ((string[])(null)));
#line 231
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table30 = new TechTalk.SpecFlow.Table(new string[] {
                        "Value"});
            table30.AddRow(new string[] {
                        "2011-04-15T13:45:26.1234+01:00"});
            table30.AddRow(new string[] {
                        "2012-04-21T13:45:27.1234+01:00"});
            table30.AddRow(new string[] {
                        "2020-04-21T13:45:26.1234+01:00"});
            table30.AddRow(new string[] {
                        "2020-04-21T13:45:26.1235+01:00"});
#line 232
 testRunner.Given("the following datetimes", ((string)(null)), table30, "Given ");
#line 238
 testRunner.When("I create reverse chronological keys for the date times", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table31 = new TechTalk.SpecFlow.Table(new string[] {
                        "Value"});
            table31.AddRow(new string[] {
                        "002520994292738765999"});
            table31.AddRow(new string[] {
                        "002520672884728765999"});
            table31.AddRow(new string[] {
                        "002518148276738765999"});
            table31.AddRow(new string[] {
                        "002518148276738764999"});
#line 239
 testRunner.Then("the the keys should be", ((string)(null)), table31, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("create a datetime from a unix timestamp")]
        public virtual void CreateADatetimeFromAUnixTimestamp()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("create a datetime from a unix timestamp", null, ((string[])(null)));
#line 246
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 247
 testRunner.When("I convert the unix timestamp -412856257 to a datetime", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 248
 testRunner.Then("the result should be the datetime \"1956-12-1T13:42:23.0000\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("create a unix timestamp from a datetime")]
        public virtual void CreateAUnixTimestampFromADatetime()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("create a unix timestamp from a datetime", null, ((string[])(null)));
#line 250
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 251
 testRunner.When("I convert the datetime \"2013-11-7T04:12:59.0000\" to a unix timestamp", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 252
 testRunner.Then("the result should be the unix timestamp 1383797579", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("create a range of days")]
        public virtual void CreateARangeOfDays()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("create a range of days", null, ((string[])(null)));
#line 254
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 255
 testRunner.When("I create a range of days from \"2013-11-7T23:59:59.000\" to \"2013-11-11T23:59:59.00" +
                    "0\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table32 = new TechTalk.SpecFlow.Table(new string[] {
                        "Value"});
            table32.AddRow(new string[] {
                        "2013-11-07T00:00:00.000"});
            table32.AddRow(new string[] {
                        "2013-11-08T00:00:00.000"});
            table32.AddRow(new string[] {
                        "2013-11-09T00:00:00.000"});
            table32.AddRow(new string[] {
                        "2013-11-10T00:00:00.000"});
            table32.AddRow(new string[] {
                        "2013-11-11T00:00:00.000"});
#line 256
 testRunner.Then("the date range should be", ((string)(null)), table32, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("create a range consisting of a single day")]
        public virtual void CreateARangeConsistingOfASingleDay()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("create a range consisting of a single day", null, ((string[])(null)));
#line 264
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 265
 testRunner.When("I create a range of days from \"2013-11-7T23:59:59.000\" to \"2013-11-7T23:59:59.000" +
                    "\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table33 = new TechTalk.SpecFlow.Table(new string[] {
                        "Value"});
            table33.AddRow(new string[] {
                        "2013-11-07T00:00:00.000"});
#line 266
 testRunner.Then("the date range should be", ((string)(null)), table33, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("create a range heading back in time")]
        public virtual void CreateARangeHeadingBackInTime()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("create a range heading back in time", null, ((string[])(null)));
#line 270
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 271
 testRunner.When("I create a range of days from \"2013-11-11T23:59:59.000\" to \"2013-11-7T23:59:59.00" +
                    "0\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table34 = new TechTalk.SpecFlow.Table(new string[] {
                        "Value"});
            table34.AddRow(new string[] {
                        "2013-11-11T00:00:00.000"});
            table34.AddRow(new string[] {
                        "2013-11-10T00:00:00.000"});
            table34.AddRow(new string[] {
                        "2013-11-09T00:00:00.000"});
            table34.AddRow(new string[] {
                        "2013-11-08T00:00:00.000"});
            table34.AddRow(new string[] {
                        "2013-11-07T00:00:00.000"});
#line 272
 testRunner.Then("the date range should be", ((string)(null)), table34, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
