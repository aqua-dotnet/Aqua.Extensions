// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:3.0.0.0
//      SpecFlow Generator Version:3.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Corvus.Extensions.Specs.DateTimeFeatures
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("DateTimeOffsetExtensions")]
    public partial class DateTimeOffsetExtensionsFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "DateTimeOffsetExtensions.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "DateTimeOffsetExtensions", "\tIn order to perform common operations on dates and times using the datetimeoffse" +
                    "t type\r\n\tAs a developer\r\n\tI want a variety of extension methods to help me out", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("calculate the approximate difference between two identical datetimeoffsets")]
        public virtual void CalculateTheApproximateDifferenceBetweenTwoIdenticalDatetimeoffsets()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("calculate the approximate difference between two identical datetimeoffsets", null, ((string[])(null)));
#line 6
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table35 = new TechTalk.SpecFlow.Table(new string[] {
                        "Value"});
            table35.AddRow(new string[] {
                        "2011-04-15T13:45:26.1234+01:00"});
            table35.AddRow(new string[] {
                        "2011-04-15T13:45:26.1234+01:00"});
#line 7
 testRunner.Given("the following datetimeoffsets", ((string)(null)), table35, "Given ");
#line 11
 testRunner.When("I calculate the approximate difference between datetimeoffset 1 and datetimeoffse" +
                    "t 2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 12
 testRunner.Then("the approximate difference should be \"less than a minute\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("calculate the approximate difference between two datetimeoffsets a minute apart")]
        public virtual void CalculateTheApproximateDifferenceBetweenTwoDatetimeoffsetsAMinuteApart()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("calculate the approximate difference between two datetimeoffsets a minute apart", null, ((string[])(null)));
#line 14
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table36 = new TechTalk.SpecFlow.Table(new string[] {
                        "Value"});
            table36.AddRow(new string[] {
                        "2011-04-15T13:45:26.1234+01:00"});
            table36.AddRow(new string[] {
                        "2011-04-15T13:46:26.1234+01:00"});
#line 15
 testRunner.Given("the following datetimeoffsets", ((string)(null)), table36, "Given ");
#line 19
 testRunner.When("I calculate the approximate difference between datetimeoffset 1 and datetimeoffse" +
                    "t 2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 20
 testRunner.Then("the approximate difference should be \"about one minute\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("calculate the approximate difference between two datetimeoffsets five minutes apa" +
            "rt")]
        public virtual void CalculateTheApproximateDifferenceBetweenTwoDatetimeoffsetsFiveMinutesApart()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("calculate the approximate difference between two datetimeoffsets five minutes apa" +
                    "rt", null, ((string[])(null)));
#line 22
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table37 = new TechTalk.SpecFlow.Table(new string[] {
                        "Value"});
            table37.AddRow(new string[] {
                        "2011-04-15T13:45:26.1234+01:00"});
            table37.AddRow(new string[] {
                        "2011-04-15T13:50:26.1234+01:00"});
#line 23
 testRunner.Given("the following datetimeoffsets", ((string)(null)), table37, "Given ");
#line 27
 testRunner.When("I calculate the approximate difference between datetimeoffset 1 and datetimeoffse" +
                    "t 2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 28
 testRunner.Then("the approximate difference should be \"about 5 minutes\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("calculate the approximate difference between two datetimeoffsets 30 minutes apart" +
            "")]
        public virtual void CalculateTheApproximateDifferenceBetweenTwoDatetimeoffsets30MinutesApart()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("calculate the approximate difference between two datetimeoffsets 30 minutes apart" +
                    "", null, ((string[])(null)));
#line 30
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table38 = new TechTalk.SpecFlow.Table(new string[] {
                        "Value"});
            table38.AddRow(new string[] {
                        "2011-04-15T13:45:26.1234+01:00"});
            table38.AddRow(new string[] {
                        "2011-04-15T14:15:26.1234+01:00"});
#line 31
 testRunner.Given("the following datetimeoffsets", ((string)(null)), table38, "Given ");
#line 35
 testRunner.When("I calculate the approximate difference between datetimeoffset 1 and datetimeoffse" +
                    "t 2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 36
 testRunner.Then("the approximate difference should be \"about 30 minutes\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("calculate the approximate difference between two datetimeoffsets 45 minutes apart" +
            "")]
        public virtual void CalculateTheApproximateDifferenceBetweenTwoDatetimeoffsets45MinutesApart()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("calculate the approximate difference between two datetimeoffsets 45 minutes apart" +
                    "", null, ((string[])(null)));
#line 38
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table39 = new TechTalk.SpecFlow.Table(new string[] {
                        "Value"});
            table39.AddRow(new string[] {
                        "2011-04-15T13:45:26.1234+01:00"});
            table39.AddRow(new string[] {
                        "2011-04-15T14:30:26.1234+01:00"});
#line 39
 testRunner.Given("the following datetimeoffsets", ((string)(null)), table39, "Given ");
#line 43
 testRunner.When("I calculate the approximate difference between datetimeoffset 1 and datetimeoffse" +
                    "t 2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 44
 testRunner.Then("the approximate difference should be \"about 45 minutes\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("calculate the approximate difference between two datetimeoffsets 1 hour apart")]
        public virtual void CalculateTheApproximateDifferenceBetweenTwoDatetimeoffsets1HourApart()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("calculate the approximate difference between two datetimeoffsets 1 hour apart", null, ((string[])(null)));
#line 46
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table40 = new TechTalk.SpecFlow.Table(new string[] {
                        "Value"});
            table40.AddRow(new string[] {
                        "2011-04-15T13:45:26.1234+01:00"});
            table40.AddRow(new string[] {
                        "2011-04-15T14:45:26.1234+01:00"});
#line 47
 testRunner.Given("the following datetimeoffsets", ((string)(null)), table40, "Given ");
#line 51
 testRunner.When("I calculate the approximate difference between datetimeoffset 1 and datetimeoffse" +
                    "t 2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 52
 testRunner.Then("the approximate difference should be \"about one hour\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("calculate the approximate difference between two datetimeoffsets 1.5 hour apart")]
        public virtual void CalculateTheApproximateDifferenceBetweenTwoDatetimeoffsets1_5HourApart()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("calculate the approximate difference between two datetimeoffsets 1.5 hour apart", null, ((string[])(null)));
#line 54
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table41 = new TechTalk.SpecFlow.Table(new string[] {
                        "Value"});
            table41.AddRow(new string[] {
                        "2011-04-15T13:45:26.1234+01:00"});
            table41.AddRow(new string[] {
                        "2011-04-15T15:15:26.1234+01:00"});
#line 55
 testRunner.Given("the following datetimeoffsets", ((string)(null)), table41, "Given ");
#line 59
 testRunner.When("I calculate the approximate difference between datetimeoffset 1 and datetimeoffse" +
                    "t 2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 60
 testRunner.Then("the approximate difference should be \"about 2 hours\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("calculate the approximate difference between two datetimeoffsets 2.5 hour apart")]
        public virtual void CalculateTheApproximateDifferenceBetweenTwoDatetimeoffsets2_5HourApart()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("calculate the approximate difference between two datetimeoffsets 2.5 hour apart", null, ((string[])(null)));
#line 62
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table42 = new TechTalk.SpecFlow.Table(new string[] {
                        "Value"});
            table42.AddRow(new string[] {
                        "2011-04-15T13:45:26.1234+01:00"});
            table42.AddRow(new string[] {
                        "2011-04-15T16:15:26.1234+01:00"});
#line 63
 testRunner.Given("the following datetimeoffsets", ((string)(null)), table42, "Given ");
#line 67
 testRunner.When("I calculate the approximate difference between datetimeoffset 1 and datetimeoffse" +
                    "t 2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 68
 testRunner.Then("the approximate difference should be \"about 2 hours\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("calculate the approximate difference between two datetimeoffsets 12 hours apart")]
        public virtual void CalculateTheApproximateDifferenceBetweenTwoDatetimeoffsets12HoursApart()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("calculate the approximate difference between two datetimeoffsets 12 hours apart", null, ((string[])(null)));
#line 70
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table43 = new TechTalk.SpecFlow.Table(new string[] {
                        "Value"});
            table43.AddRow(new string[] {
                        "2011-04-15T13:45:26.1234+01:00"});
            table43.AddRow(new string[] {
                        "2011-04-16T01:45:26.1234+01:00"});
#line 71
 testRunner.Given("the following datetimeoffsets", ((string)(null)), table43, "Given ");
#line 75
 testRunner.When("I calculate the approximate difference between datetimeoffset 1 and datetimeoffse" +
                    "t 2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 76
 testRunner.Then("the approximate difference should be \"about 12 hours\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("calculate the approximate difference between two datetimeoffsets 18 hours apart")]
        public virtual void CalculateTheApproximateDifferenceBetweenTwoDatetimeoffsets18HoursApart()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("calculate the approximate difference between two datetimeoffsets 18 hours apart", null, ((string[])(null)));
#line 78
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table44 = new TechTalk.SpecFlow.Table(new string[] {
                        "Value"});
            table44.AddRow(new string[] {
                        "2011-04-15T13:45:26.1234+01:00"});
            table44.AddRow(new string[] {
                        "2011-04-16T07:45:26.1234+01:00"});
#line 79
 testRunner.Given("the following datetimeoffsets", ((string)(null)), table44, "Given ");
#line 83
 testRunner.When("I calculate the approximate difference between datetimeoffset 1 and datetimeoffse" +
                    "t 2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 84
 testRunner.Then("the approximate difference should be \"about one day\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("calculate the approximate difference between two datetimeoffsets 22 hours apart")]
        public virtual void CalculateTheApproximateDifferenceBetweenTwoDatetimeoffsets22HoursApart()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("calculate the approximate difference between two datetimeoffsets 22 hours apart", null, ((string[])(null)));
#line 86
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table45 = new TechTalk.SpecFlow.Table(new string[] {
                        "Value"});
            table45.AddRow(new string[] {
                        "2011-04-15T13:45:26.1234+01:00"});
            table45.AddRow(new string[] {
                        "2011-04-16T11:45:26.1234+01:00"});
#line 87
 testRunner.Given("the following datetimeoffsets", ((string)(null)), table45, "Given ");
#line 91
 testRunner.When("I calculate the approximate difference between datetimeoffset 1 and datetimeoffse" +
                    "t 2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 92
 testRunner.Then("the approximate difference should be \"about one day\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("calculate the approximate difference between two datetimeoffsets 24 hours apart")]
        public virtual void CalculateTheApproximateDifferenceBetweenTwoDatetimeoffsets24HoursApart()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("calculate the approximate difference between two datetimeoffsets 24 hours apart", null, ((string[])(null)));
#line 94
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table46 = new TechTalk.SpecFlow.Table(new string[] {
                        "Value"});
            table46.AddRow(new string[] {
                        "2011-04-15T13:45:26.1234+01:00"});
            table46.AddRow(new string[] {
                        "2011-04-16T13:45:26.1234+01:00"});
#line 95
 testRunner.Given("the following datetimeoffsets", ((string)(null)), table46, "Given ");
#line 99
 testRunner.When("I calculate the approximate difference between datetimeoffset 1 and datetimeoffse" +
                    "t 2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 100
 testRunner.Then("the approximate difference should be \"about one day\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("calculate the approximate difference between two datetimeoffsets 26 hours apart")]
        public virtual void CalculateTheApproximateDifferenceBetweenTwoDatetimeoffsets26HoursApart()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("calculate the approximate difference between two datetimeoffsets 26 hours apart", null, ((string[])(null)));
#line 102
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table47 = new TechTalk.SpecFlow.Table(new string[] {
                        "Value"});
            table47.AddRow(new string[] {
                        "2011-04-15T13:45:26.1234+01:00"});
            table47.AddRow(new string[] {
                        "2011-04-16T15:45:26.1234+01:00"});
#line 103
 testRunner.Given("the following datetimeoffsets", ((string)(null)), table47, "Given ");
#line 107
 testRunner.When("I calculate the approximate difference between datetimeoffset 1 and datetimeoffse" +
                    "t 2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 108
 testRunner.Then("the approximate difference should be \"about one day\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("calculate the approximate difference between two datetimeoffsets 72 hours apart")]
        public virtual void CalculateTheApproximateDifferenceBetweenTwoDatetimeoffsets72HoursApart()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("calculate the approximate difference between two datetimeoffsets 72 hours apart", null, ((string[])(null)));
#line 110
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table48 = new TechTalk.SpecFlow.Table(new string[] {
                        "Value"});
            table48.AddRow(new string[] {
                        "2011-04-15T13:45:26.1234+01:00"});
            table48.AddRow(new string[] {
                        "2011-04-18T13:45:26.1234+01:00"});
#line 111
 testRunner.Given("the following datetimeoffsets", ((string)(null)), table48, "Given ");
#line 115
 testRunner.When("I calculate the approximate difference between datetimeoffset 1 and datetimeoffse" +
                    "t 2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 116
 testRunner.Then("the approximate difference should be \"about 3 days\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("calculate the approximate difference between two datetimeoffsets 144 hours apart")]
        public virtual void CalculateTheApproximateDifferenceBetweenTwoDatetimeoffsets144HoursApart()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("calculate the approximate difference between two datetimeoffsets 144 hours apart", null, ((string[])(null)));
#line 118
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table49 = new TechTalk.SpecFlow.Table(new string[] {
                        "Value"});
            table49.AddRow(new string[] {
                        "2011-04-15T13:45:26.1234+01:00"});
            table49.AddRow(new string[] {
                        "2011-04-21T13:45:26.1234+01:00"});
#line 119
 testRunner.Given("the following datetimeoffsets", ((string)(null)), table49, "Given ");
#line 123
 testRunner.When("I calculate the approximate difference between datetimeoffset 1 and datetimeoffse" +
                    "t 2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 124
 testRunner.Then("the approximate difference should be \"about 6 days\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("create chronological key from a date time using a suffix")]
        public virtual void CreateChronologicalKeyFromADateTimeUsingASuffix()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("create chronological key from a date time using a suffix", null, ((string[])(null)));
#line 126
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table50 = new TechTalk.SpecFlow.Table(new string[] {
                        "Value"});
            table50.AddRow(new string[] {
                        "2011-04-15T13:45:26.1234+01:00"});
            table50.AddRow(new string[] {
                        "2012-04-21T13:45:27.1234+01:00"});
            table50.AddRow(new string[] {
                        "2020-04-21T13:45:26.1234+01:00"});
            table50.AddRow(new string[] {
                        "2020-04-21T13:45:26.1235+01:00"});
#line 127
 testRunner.Given("the following datetimeoffsets", ((string)(null)), table50, "Given ");
#line 133
 testRunner.When("I create chronological keys for the datetimeoffsets with the suffix \'AppendMe\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table51 = new TechTalk.SpecFlow.Table(new string[] {
                        "Value"});
            table51.AddRow(new string[] {
                        "000634384683261234000-AppendMe"});
            table51.AddRow(new string[] {
                        "000634706091271234000-AppendMe"});
            table51.AddRow(new string[] {
                        "000637230699261234000-AppendMe"});
            table51.AddRow(new string[] {
                        "000637230699261235000-AppendMe"});
#line 134
 testRunner.Then("the datetimeoffset keys should be", ((string)(null)), table51, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("create chronological key from a date time with a uniqueid")]
        public virtual void CreateChronologicalKeyFromADateTimeWithAUniqueid()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("create chronological key from a date time with a uniqueid", null, ((string[])(null)));
#line 141
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table52 = new TechTalk.SpecFlow.Table(new string[] {
                        "Value"});
            table52.AddRow(new string[] {
                        "2011-04-15T13:45:26.1234+01:00"});
            table52.AddRow(new string[] {
                        "2012-04-21T13:45:27.1234+01:00"});
            table52.AddRow(new string[] {
                        "2020-04-21T13:45:26.1234+01:00"});
            table52.AddRow(new string[] {
                        "2020-04-21T13:45:26.1235+01:00"});
#line 142
 testRunner.Given("the following datetimeoffsets", ((string)(null)), table52, "Given ");
#line 148
 testRunner.When("I create chronological keys for the datetimeoffsets with a unique suffix", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table53 = new TechTalk.SpecFlow.Table(new string[] {
                        "Value"});
            table53.AddRow(new string[] {
                        "000634384683261234000-"});
            table53.AddRow(new string[] {
                        "000634706091271234000-"});
            table53.AddRow(new string[] {
                        "000637230699261234000-"});
            table53.AddRow(new string[] {
                        "000637230699261235000-"});
#line 149
 testRunner.Then("the datetimeoffset keys should match the following with a guid", ((string)(null)), table53, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("create chronological key stem without a suffix from a date time")]
        public virtual void CreateChronologicalKeyStemWithoutASuffixFromADateTime()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("create chronological key stem without a suffix from a date time", null, ((string[])(null)));
#line 156
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table54 = new TechTalk.SpecFlow.Table(new string[] {
                        "Value"});
            table54.AddRow(new string[] {
                        "2011-04-15T13:45:26.1234+01:00"});
            table54.AddRow(new string[] {
                        "2012-04-21T13:45:27.1234+01:00"});
            table54.AddRow(new string[] {
                        "2020-04-21T13:45:26.1234+01:00"});
            table54.AddRow(new string[] {
                        "2020-04-21T13:45:26.1235+01:00"});
#line 157
 testRunner.Given("the following datetimeoffsets", ((string)(null)), table54, "Given ");
#line 163
 testRunner.When("I create chronological key stems for the datetimeoffsets", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table55 = new TechTalk.SpecFlow.Table(new string[] {
                        "Value"});
            table55.AddRow(new string[] {
                        "000634384683261234000-"});
            table55.AddRow(new string[] {
                        "000634706091271234000-"});
            table55.AddRow(new string[] {
                        "000637230699261234000-"});
            table55.AddRow(new string[] {
                        "000637230699261235000-"});
#line 164
 testRunner.Then("the datetimeoffset keys should be", ((string)(null)), table55, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("create chronological key from a date time without a suffix")]
        public virtual void CreateChronologicalKeyFromADateTimeWithoutASuffix()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("create chronological key from a date time without a suffix", null, ((string[])(null)));
#line 171
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table56 = new TechTalk.SpecFlow.Table(new string[] {
                        "Value"});
            table56.AddRow(new string[] {
                        "2011-04-15T13:45:26.1234+01:00"});
            table56.AddRow(new string[] {
                        "2012-04-21T13:45:27.1234+01:00"});
            table56.AddRow(new string[] {
                        "2020-04-21T13:45:26.1234+01:00"});
            table56.AddRow(new string[] {
                        "2020-04-21T13:45:26.1235+01:00"});
#line 172
 testRunner.Given("the following datetimeoffsets", ((string)(null)), table56, "Given ");
#line 178
 testRunner.When("I create chronological keys for the datetimeoffsets", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table57 = new TechTalk.SpecFlow.Table(new string[] {
                        "Value"});
            table57.AddRow(new string[] {
                        "000634384683261234000"});
            table57.AddRow(new string[] {
                        "000634706091271234000"});
            table57.AddRow(new string[] {
                        "000637230699261234000"});
            table57.AddRow(new string[] {
                        "000637230699261235000"});
#line 179
 testRunner.Then("the datetimeoffset keys should be", ((string)(null)), table57, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("create reverse chronological key from a date time using a suffix")]
        public virtual void CreateReverseChronologicalKeyFromADateTimeUsingASuffix()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("create reverse chronological key from a date time using a suffix", null, ((string[])(null)));
#line 186
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table58 = new TechTalk.SpecFlow.Table(new string[] {
                        "Value"});
            table58.AddRow(new string[] {
                        "2011-04-15T13:45:26.1234+01:00"});
            table58.AddRow(new string[] {
                        "2012-04-21T13:45:27.1234+01:00"});
            table58.AddRow(new string[] {
                        "2020-04-21T13:45:26.1234+01:00"});
            table58.AddRow(new string[] {
                        "2020-04-21T13:45:26.1235+01:00"});
#line 187
 testRunner.Given("the following datetimeoffsets", ((string)(null)), table58, "Given ");
#line 193
 testRunner.When("I create reverse chronological keys for the datetimeoffsets with the suffix \'Appe" +
                    "ndMe\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table59 = new TechTalk.SpecFlow.Table(new string[] {
                        "Value"});
            table59.AddRow(new string[] {
                        "002520994292738765999-AppendMe"});
            table59.AddRow(new string[] {
                        "002520672884728765999-AppendMe"});
            table59.AddRow(new string[] {
                        "002518148276738765999-AppendMe"});
            table59.AddRow(new string[] {
                        "002518148276738764999-AppendMe"});
#line 194
 testRunner.Then("the datetimeoffset keys should be", ((string)(null)), table59, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("create reverse chronological key from a date time with a uniqueid")]
        public virtual void CreateReverseChronologicalKeyFromADateTimeWithAUniqueid()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("create reverse chronological key from a date time with a uniqueid", null, ((string[])(null)));
#line 201
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table60 = new TechTalk.SpecFlow.Table(new string[] {
                        "Value"});
            table60.AddRow(new string[] {
                        "2011-04-15T13:45:26.1234+01:00"});
            table60.AddRow(new string[] {
                        "2012-04-21T13:45:27.1234+01:00"});
            table60.AddRow(new string[] {
                        "2020-04-21T13:45:26.1234+01:00"});
            table60.AddRow(new string[] {
                        "2020-04-21T13:45:26.1235+01:00"});
#line 202
 testRunner.Given("the following datetimeoffsets", ((string)(null)), table60, "Given ");
#line 208
 testRunner.When("I create reverse chronological keys for the datetimeoffsets with a unique suffix", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table61 = new TechTalk.SpecFlow.Table(new string[] {
                        "Value"});
            table61.AddRow(new string[] {
                        "002520994292738765999-"});
            table61.AddRow(new string[] {
                        "002520672884728765999-"});
            table61.AddRow(new string[] {
                        "002518148276738765999-"});
            table61.AddRow(new string[] {
                        "002518148276738764999-"});
#line 209
 testRunner.Then("the datetimeoffset keys should match the following with a guid", ((string)(null)), table61, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("create reverse chronological key stem without a suffix from a date time")]
        public virtual void CreateReverseChronologicalKeyStemWithoutASuffixFromADateTime()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("create reverse chronological key stem without a suffix from a date time", null, ((string[])(null)));
#line 216
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table62 = new TechTalk.SpecFlow.Table(new string[] {
                        "Value"});
            table62.AddRow(new string[] {
                        "2011-04-15T13:45:26.1234+01:00"});
            table62.AddRow(new string[] {
                        "2012-04-21T13:45:27.1234+01:00"});
            table62.AddRow(new string[] {
                        "2020-04-21T13:45:26.1234+01:00"});
            table62.AddRow(new string[] {
                        "2020-04-21T13:45:26.1235+01:00"});
#line 217
 testRunner.Given("the following datetimeoffsets", ((string)(null)), table62, "Given ");
#line 223
 testRunner.When("I create reverse chronological key stems for the datetimeoffsets", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table63 = new TechTalk.SpecFlow.Table(new string[] {
                        "Value"});
            table63.AddRow(new string[] {
                        "002520994292738765999-"});
            table63.AddRow(new string[] {
                        "002520672884728765999-"});
            table63.AddRow(new string[] {
                        "002518148276738765999-"});
            table63.AddRow(new string[] {
                        "002518148276738764999-"});
#line 224
 testRunner.Then("the datetimeoffset keys should be", ((string)(null)), table63, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("create reverse chronological key from a date time without a suffix")]
        public virtual void CreateReverseChronologicalKeyFromADateTimeWithoutASuffix()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("create reverse chronological key from a date time without a suffix", null, ((string[])(null)));
#line 231
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table64 = new TechTalk.SpecFlow.Table(new string[] {
                        "Value"});
            table64.AddRow(new string[] {
                        "2011-04-15T13:45:26.1234+01:00"});
            table64.AddRow(new string[] {
                        "2012-04-21T13:45:27.1234+01:00"});
            table64.AddRow(new string[] {
                        "2020-04-21T13:45:26.1234+01:00"});
            table64.AddRow(new string[] {
                        "2020-04-21T13:45:26.1235+01:00"});
#line 232
 testRunner.Given("the following datetimeoffsets", ((string)(null)), table64, "Given ");
#line 238
 testRunner.When("I create reverse chronological keys for the datetimeoffsets", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table65 = new TechTalk.SpecFlow.Table(new string[] {
                        "Value"});
            table65.AddRow(new string[] {
                        "002520994292738765999"});
            table65.AddRow(new string[] {
                        "002520672884728765999"});
            table65.AddRow(new string[] {
                        "002518148276738765999"});
            table65.AddRow(new string[] {
                        "002518148276738764999"});
#line 239
 testRunner.Then("the datetimeoffset keys should be", ((string)(null)), table65, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("create a datetimeoffset from a unix timestamp")]
        public virtual void CreateADatetimeoffsetFromAUnixTimestamp()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("create a datetimeoffset from a unix timestamp", null, ((string[])(null)));
#line 246
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 247
 testRunner.When("I convert the unix timestamp -412856257 to a datetimeoffset", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 248
 testRunner.Then("the result should be the datetimeoffset \"1956-12-1T13:42:23.000Z\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("create a unix timestamp from a datetimeoffset")]
        public virtual void CreateAUnixTimestampFromADatetimeoffset()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("create a unix timestamp from a datetimeoffset", null, ((string[])(null)));
#line 250
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 251
 testRunner.When("I convert the datetimeoffset \"2013-11-7T04:12:59.000Z\" to a unix timestamp", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 252
 testRunner.Then("the result should be the unix timestamp 1383797579", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("create a range of days")]
        public virtual void CreateARangeOfDays()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("create a range of days", null, ((string[])(null)));
#line 254
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 255
 testRunner.When("I create a range of datetimeoffsets from \"2013-11-7T23:59:59.000\" to \"2013-11-11T" +
                    "23:59:59.000\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table66 = new TechTalk.SpecFlow.Table(new string[] {
                        "Value"});
            table66.AddRow(new string[] {
                        "2013-11-07T00:00:00.000"});
            table66.AddRow(new string[] {
                        "2013-11-08T00:00:00.000"});
            table66.AddRow(new string[] {
                        "2013-11-09T00:00:00.000"});
            table66.AddRow(new string[] {
                        "2013-11-10T00:00:00.000"});
            table66.AddRow(new string[] {
                        "2013-11-11T00:00:00.000"});
#line 256
 testRunner.Then("the datetimeoffset range should be", ((string)(null)), table66, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("create a range consisting of a single day")]
        public virtual void CreateARangeConsistingOfASingleDay()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("create a range consisting of a single day", null, ((string[])(null)));
#line 264
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 265
 testRunner.When("I create a range of datetimeoffsets from \"2013-11-7T23:59:59.000\" to \"2013-11-7T2" +
                    "3:59:59.000\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table67 = new TechTalk.SpecFlow.Table(new string[] {
                        "Value"});
            table67.AddRow(new string[] {
                        "2013-11-07T00:00:00.000"});
#line 266
 testRunner.Then("the datetimeoffset range should be", ((string)(null)), table67, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("create a range heading back in time")]
        public virtual void CreateARangeHeadingBackInTime()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("create a range heading back in time", null, ((string[])(null)));
#line 270
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 271
 testRunner.When("I create a range of datetimeoffsets from \"2013-11-11T23:59:59.000\" to \"2013-11-7T" +
                    "23:59:59.000\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table68 = new TechTalk.SpecFlow.Table(new string[] {
                        "Value"});
            table68.AddRow(new string[] {
                        "2013-11-11T00:00:00.000"});
            table68.AddRow(new string[] {
                        "2013-11-10T00:00:00.000"});
            table68.AddRow(new string[] {
                        "2013-11-09T00:00:00.000"});
            table68.AddRow(new string[] {
                        "2013-11-08T00:00:00.000"});
            table68.AddRow(new string[] {
                        "2013-11-07T00:00:00.000"});
#line 272
 testRunner.Then("the datetimeoffset range should be", ((string)(null)), table68, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("determine if a date is after another date with a specific granularity")]
        [NUnit.Framework.TestCaseAttribute("2019-01-01T08:00:01.251", "2019-01-01T08:00:01.250", "Second", "false", null)]
        [NUnit.Framework.TestCaseAttribute("2019-01-01T08:00:01.999", "2019-01-01T08:00:01.001", "Second", "false", null)]
        [NUnit.Framework.TestCaseAttribute("2019-01-01T08:00:02.000", "2019-01-01T08:00:01.001", "Second", "true", null)]
        [NUnit.Framework.TestCaseAttribute("2019-01-01T08:01:00.000", "2019-01-01T08:00:00.001", "Second", "true", null)]
        [NUnit.Framework.TestCaseAttribute("2019-01-01T09:01:00.000", "2019-01-01T08:00:00.001", "Second", "true", null)]
        [NUnit.Framework.TestCaseAttribute("2019-01-02T08:01:00.000", "2019-01-01T08:00:00.001", "Second", "true", null)]
        [NUnit.Framework.TestCaseAttribute("2019-01-08T07:01:00.000", "2019-01-01T08:00:00.001", "Second", "true", null)]
        [NUnit.Framework.TestCaseAttribute("2019-01-08T08:01:00.000", "2019-01-01T08:00:00.001", "Second", "true", null)]
        [NUnit.Framework.TestCaseAttribute("2019-02-01T07:01:00.000", "2019-01-01T08:00:00.001", "Second", "true", null)]
        [NUnit.Framework.TestCaseAttribute("2019-02-01T07:01:00.000", "2019-01-01T08:00:00.001", "Second", "true", null)]
        [NUnit.Framework.TestCaseAttribute("2020-01-01T07:01:00.000", "2019-01-01T08:00:00.001", "Second", "true", null)]
        [NUnit.Framework.TestCaseAttribute("2029-01-01T07:01:00.000", "2019-02-01T08:00:00.001", "Second", "true", null)]
        [NUnit.Framework.TestCaseAttribute("2029-01-01T07:01:00.000", "2019-01-01T08:00:00.001", "Second", "true", null)]
        [NUnit.Framework.TestCaseAttribute("2019-01-01T08:00:01.251", "2019-01-01T08:00:01.250", "Minute", "false", null)]
        [NUnit.Framework.TestCaseAttribute("2019-01-01T08:00:01.999", "2019-01-01T08:00:01.001", "Minute", "false", null)]
        [NUnit.Framework.TestCaseAttribute("2019-01-01T08:00:02.000", "2019-01-01T08:00:01.001", "Minute", "false", null)]
        [NUnit.Framework.TestCaseAttribute("2019-01-01T08:01:00.000", "2019-01-01T08:00:00.001", "Minute", "true", null)]
        [NUnit.Framework.TestCaseAttribute("2019-01-01T08:01:00.000", "2019-01-01T08:00:00.000", "Minute", "true", null)]
        [NUnit.Framework.TestCaseAttribute("2019-01-01T09:01:00.000", "2019-01-01T08:00:00.001", "Minute", "true", null)]
        [NUnit.Framework.TestCaseAttribute("2019-01-02T08:01:00.000", "2019-01-01T08:00:00.001", "Minute", "true", null)]
        [NUnit.Framework.TestCaseAttribute("2019-01-08T07:01:00.000", "2019-01-01T08:00:00.001", "Minute", "true", null)]
        [NUnit.Framework.TestCaseAttribute("2019-01-08T08:01:00.000", "2019-01-01T08:00:00.001", "Minute", "true", null)]
        [NUnit.Framework.TestCaseAttribute("2019-02-01T07:01:00.000", "2019-01-01T08:00:00.001", "Minute", "true", null)]
        [NUnit.Framework.TestCaseAttribute("2019-02-01T07:01:00.000", "2019-01-01T08:00:00.001", "Minute", "true", null)]
        [NUnit.Framework.TestCaseAttribute("2020-01-01T07:01:00.000", "2019-01-01T08:00:00.001", "Minute", "true", null)]
        [NUnit.Framework.TestCaseAttribute("2029-01-01T07:01:00.000", "2019-02-01T08:00:00.001", "Minute", "true", null)]
        [NUnit.Framework.TestCaseAttribute("2029-01-01T07:01:00.000", "2019-01-01T08:00:00.001", "Minute", "true", null)]
        [NUnit.Framework.TestCaseAttribute("2019-01-01T08:00:01.251", "2019-01-01T08:00:01.250", "Hour", "false", null)]
        [NUnit.Framework.TestCaseAttribute("2019-01-01T08:00:01.999", "2019-01-01T08:00:01.001", "Hour", "false", null)]
        [NUnit.Framework.TestCaseAttribute("2019-01-01T08:00:02.000", "2019-01-01T08:00:01.001", "Hour", "false", null)]
        [NUnit.Framework.TestCaseAttribute("2019-01-01T08:01:00.000", "2019-01-01T08:00:00.001", "Hour", "false", null)]
        [NUnit.Framework.TestCaseAttribute("2019-01-01T09:01:00.000", "2019-01-01T08:00:00.001", "Hour", "true", null)]
        [NUnit.Framework.TestCaseAttribute("2019-01-01T09:01:00.000", "2019-01-01T08:00:00.000", "Hour", "true", null)]
        [NUnit.Framework.TestCaseAttribute("2019-01-02T08:01:00.000", "2019-01-01T08:00:00.001", "Hour", "true", null)]
        [NUnit.Framework.TestCaseAttribute("2019-01-08T07:01:00.000", "2019-01-01T08:00:00.001", "Hour", "true", null)]
        [NUnit.Framework.TestCaseAttribute("2019-01-08T08:01:00.000", "2019-01-01T08:00:00.001", "Hour", "true", null)]
        [NUnit.Framework.TestCaseAttribute("2019-02-01T07:01:00.000", "2019-01-01T08:00:00.001", "Hour", "true", null)]
        [NUnit.Framework.TestCaseAttribute("2019-02-01T07:01:00.000", "2019-01-01T08:00:00.001", "Hour", "true", null)]
        [NUnit.Framework.TestCaseAttribute("2020-01-01T07:01:00.000", "2019-01-01T08:00:00.001", "Hour", "true", null)]
        [NUnit.Framework.TestCaseAttribute("2029-01-01T07:01:00.000", "2019-02-01T08:00:00.001", "Hour", "true", null)]
        [NUnit.Framework.TestCaseAttribute("2029-01-01T07:01:00.000", "2019-01-01T08:00:00.001", "Hour", "true", null)]
        [NUnit.Framework.TestCaseAttribute("2019-01-01T08:00:01.251", "2019-01-01T08:00:01.250", "Day", "false", null)]
        [NUnit.Framework.TestCaseAttribute("2019-01-01T08:00:01.999", "2019-01-01T08:00:01.001", "Day", "false", null)]
        [NUnit.Framework.TestCaseAttribute("2019-01-01T08:00:02.000", "2019-01-01T08:00:01.001", "Day", "false", null)]
        [NUnit.Framework.TestCaseAttribute("2019-01-01T08:01:00.000", "2019-01-01T08:00:00.001", "Day", "false", null)]
        [NUnit.Framework.TestCaseAttribute("2019-01-01T09:01:00.000", "2019-01-01T08:00:00.001", "Day", "false", null)]
        [NUnit.Framework.TestCaseAttribute("2019-01-02T08:01:00.000", "2019-01-01T08:00:00.001", "Day", "true", null)]
        [NUnit.Framework.TestCaseAttribute("2019-01-02T08:01:00.000", "2019-01-01T08:00:00.000", "Day", "true", null)]
        [NUnit.Framework.TestCaseAttribute("2019-01-08T07:01:00.000", "2019-01-01T08:00:00.001", "Day", "true", null)]
        [NUnit.Framework.TestCaseAttribute("2019-01-08T08:01:00.000", "2019-01-01T08:00:00.001", "Day", "true", null)]
        [NUnit.Framework.TestCaseAttribute("2019-02-01T07:01:00.000", "2019-01-01T08:00:00.001", "Day", "true", null)]
        [NUnit.Framework.TestCaseAttribute("2019-02-01T07:01:00.000", "2019-01-01T08:00:00.001", "Day", "true", null)]
        [NUnit.Framework.TestCaseAttribute("2020-01-01T07:01:00.000", "2019-01-01T08:00:00.001", "Day", "true", null)]
        [NUnit.Framework.TestCaseAttribute("2029-01-01T07:01:00.000", "2019-02-01T08:00:00.001", "Day", "true", null)]
        [NUnit.Framework.TestCaseAttribute("2029-01-01T07:01:00.000", "2019-01-01T08:00:00.001", "Day", "true", null)]
        [NUnit.Framework.TestCaseAttribute("2019-01-01T08:00:01.251", "2019-01-01T08:00:01.250", "Week", "false", null)]
        [NUnit.Framework.TestCaseAttribute("2019-01-01T08:00:01.999", "2019-01-01T08:00:01.001", "Week", "false", null)]
        [NUnit.Framework.TestCaseAttribute("2019-01-01T08:00:02.000", "2019-01-01T08:00:01.001", "Week", "false", null)]
        [NUnit.Framework.TestCaseAttribute("2019-01-01T08:01:00.000", "2019-01-01T08:00:00.001", "Week", "false", null)]
        [NUnit.Framework.TestCaseAttribute("2019-01-01T09:01:00.000", "2019-01-01T08:00:00.001", "Week", "false", null)]
        [NUnit.Framework.TestCaseAttribute("2019-01-02T08:01:00.000", "2019-01-01T08:00:00.001", "Week", "false", null)]
        [NUnit.Framework.TestCaseAttribute("2019-01-08T07:01:00.000", "2019-01-01T08:00:00.001", "Week", "true", null)]
        [NUnit.Framework.TestCaseAttribute("2019-01-08T08:01:00.000", "2019-01-01T08:00:00.001", "Week", "true", null)]
        [NUnit.Framework.TestCaseAttribute("2019-01-08T08:01:00.000", "2019-01-01T08:00:00.000", "Week", "true", null)]
        [NUnit.Framework.TestCaseAttribute("2019-01-08T08:01:00.000", "2019-01-01T08:00:00.001", "Week", "true", null)]
        [NUnit.Framework.TestCaseAttribute("2019-02-01T07:01:00.000", "2019-01-01T08:00:00.001", "Week", "true", null)]
        [NUnit.Framework.TestCaseAttribute("2019-02-01T07:01:00.000", "2019-01-01T08:00:00.001", "Week", "true", null)]
        [NUnit.Framework.TestCaseAttribute("2020-01-01T07:01:00.000", "2019-01-01T08:00:00.001", "Week", "true", null)]
        [NUnit.Framework.TestCaseAttribute("2029-01-01T07:01:00.000", "2019-02-01T08:00:00.001", "Week", "true", null)]
        [NUnit.Framework.TestCaseAttribute("2029-01-01T07:01:00.000", "2019-01-01T08:00:00.001", "Week", "true", null)]
        [NUnit.Framework.TestCaseAttribute("2019-01-01T08:00:01.251", "2019-01-01T08:00:01.250", "Month", "false", null)]
        [NUnit.Framework.TestCaseAttribute("2019-01-01T08:00:01.999", "2019-01-01T08:00:01.001", "Month", "false", null)]
        [NUnit.Framework.TestCaseAttribute("2019-01-01T08:00:02.000", "2019-01-01T08:00:01.001", "Month", "false", null)]
        [NUnit.Framework.TestCaseAttribute("2019-01-01T08:01:00.000", "2019-01-01T08:00:00.001", "Month", "false", null)]
        [NUnit.Framework.TestCaseAttribute("2019-01-01T09:01:00.000", "2019-01-01T08:00:00.001", "Month", "false", null)]
        [NUnit.Framework.TestCaseAttribute("2019-01-02T08:01:00.000", "2019-01-01T08:00:00.001", "Month", "false", null)]
        [NUnit.Framework.TestCaseAttribute("2019-01-08T07:01:00.000", "2019-01-01T08:00:00.001", "Month", "false", null)]
        [NUnit.Framework.TestCaseAttribute("2019-01-08T08:01:00.000", "2019-01-01T08:00:00.001", "Month", "false", null)]
        [NUnit.Framework.TestCaseAttribute("2019-02-01T07:01:00.000", "2019-01-01T08:00:00.001", "Month", "true", null)]
        [NUnit.Framework.TestCaseAttribute("2019-02-01T08:00:00.000", "2019-01-01T08:00:00.001", "Month", "true", null)]
        [NUnit.Framework.TestCaseAttribute("2019-02-01T08:00:00.000", "2019-01-01T08:00:00.000", "Month", "true", null)]
        [NUnit.Framework.TestCaseAttribute("2019-01-01T08:00:01.251", "2019-01-01T08:00:01.250", "Year", "false", null)]
        [NUnit.Framework.TestCaseAttribute("2019-01-01T08:00:01.999", "2019-01-01T08:00:01.001", "Year", "false", null)]
        [NUnit.Framework.TestCaseAttribute("2019-01-01T08:00:02.000", "2019-01-01T08:00:01.001", "Year", "false", null)]
        [NUnit.Framework.TestCaseAttribute("2019-01-01T08:01:00.000", "2019-01-01T08:00:00.001", "Year", "false", null)]
        [NUnit.Framework.TestCaseAttribute("2019-01-01T09:01:00.000", "2019-01-01T08:00:00.001", "Year", "false", null)]
        [NUnit.Framework.TestCaseAttribute("2019-01-02T08:01:00.000", "2019-01-01T08:00:00.001", "Year", "false", null)]
        [NUnit.Framework.TestCaseAttribute("2019-01-08T07:01:00.000", "2019-01-01T08:00:00.001", "Year", "false", null)]
        [NUnit.Framework.TestCaseAttribute("2019-01-08T08:01:00.000", "2019-01-01T08:00:00.001", "Year", "false", null)]
        [NUnit.Framework.TestCaseAttribute("2019-02-01T07:01:00.000", "2019-01-01T08:00:00.001", "Year", "false", null)]
        [NUnit.Framework.TestCaseAttribute("2019-02-01T07:01:00.000", "2019-01-01T08:00:00.001", "Year", "false", null)]
        [NUnit.Framework.TestCaseAttribute("2020-01-01T07:01:00.000", "2019-01-01T08:00:00.001", "Year", "true", null)]
        [NUnit.Framework.TestCaseAttribute("2020-01-01T08:00:00.000", "2019-01-01T08:00:00.001", "Year", "true", null)]
        [NUnit.Framework.TestCaseAttribute("2020-01-01T08:00:00.000", "2019-01-01T08:00:00.000", "Year", "true", null)]
        [NUnit.Framework.TestCaseAttribute("2029-01-01T07:01:00.000", "2019-02-01T08:00:00.001", "Year", "true", null)]
        [NUnit.Framework.TestCaseAttribute("2029-01-01T07:01:00.000", "2019-01-01T08:00:00.001", "Year", "true", null)]
        [NUnit.Framework.TestCaseAttribute("2019-01-01T08:00:01.251", "2019-01-01T08:00:01.250", "Decade", "false", null)]
        [NUnit.Framework.TestCaseAttribute("2019-01-01T08:00:01.999", "2019-01-01T08:00:01.001", "Decade", "false", null)]
        [NUnit.Framework.TestCaseAttribute("2019-01-01T08:00:02.000", "2019-01-01T08:00:01.001", "Decade", "false", null)]
        [NUnit.Framework.TestCaseAttribute("2019-01-01T08:01:00.000", "2019-01-01T08:00:00.001", "Decade", "false", null)]
        [NUnit.Framework.TestCaseAttribute("2019-01-01T09:01:00.000", "2019-01-01T08:00:00.001", "Decade", "false", null)]
        [NUnit.Framework.TestCaseAttribute("2019-01-02T08:01:00.000", "2019-01-01T08:00:00.001", "Decade", "false", null)]
        [NUnit.Framework.TestCaseAttribute("2019-01-08T07:01:00.000", "2019-01-01T08:00:00.001", "Decade", "false", null)]
        [NUnit.Framework.TestCaseAttribute("2019-01-08T08:01:00.000", "2019-01-01T08:00:00.001", "Decade", "false", null)]
        [NUnit.Framework.TestCaseAttribute("2019-02-01T07:01:00.000", "2019-01-01T08:00:00.001", "Decade", "false", null)]
        [NUnit.Framework.TestCaseAttribute("2019-02-01T07:01:00.000", "2019-01-01T08:00:00.001", "Decade", "false", null)]
        [NUnit.Framework.TestCaseAttribute("2019-01-01T07:01:00.000", "2018-01-01T08:00:00.001", "Decade", "false", null)]
        [NUnit.Framework.TestCaseAttribute("2020-01-01T07:01:00.000", "2019-01-01T08:00:00.001", "Decade", "true", null)]
        [NUnit.Framework.TestCaseAttribute("2029-01-01T07:01:00.000", "2019-02-01T08:00:00.001", "Decade", "true", null)]
        [NUnit.Framework.TestCaseAttribute("2029-01-01T07:01:00.000", "2019-02-01T08:00:00.001", "Decade", "true", null)]
        [NUnit.Framework.TestCaseAttribute("2029-01-01T07:01:00.000", "2019-01-01T08:00:00.001", "Decade", "true", null)]
        [NUnit.Framework.TestCaseAttribute("2029-01-01T08:00:00.000", "2019-01-01T08:00:00.001", "Decade", "true", null)]
        [NUnit.Framework.TestCaseAttribute("2029-01-01T08:00:00.000", "2019-01-01T08:00:00.000", "Decade", "true", null)]
        [NUnit.Framework.TestCaseAttribute("2019-01-01T08:00:01.251", "2019-01-01T08:00:01.250", "Century", "false", null)]
        [NUnit.Framework.TestCaseAttribute("2019-01-01T08:00:01.999", "2019-01-01T08:00:01.001", "Century", "false", null)]
        [NUnit.Framework.TestCaseAttribute("2019-01-01T08:00:02.000", "2019-01-01T08:00:01.001", "Century", "false", null)]
        [NUnit.Framework.TestCaseAttribute("2019-01-01T08:01:00.000", "2019-01-01T08:00:00.001", "Century", "false", null)]
        [NUnit.Framework.TestCaseAttribute("2019-01-01T09:01:00.000", "2019-01-01T08:00:00.001", "Century", "false", null)]
        [NUnit.Framework.TestCaseAttribute("2019-01-02T08:01:00.000", "2019-01-01T08:00:00.001", "Century", "false", null)]
        [NUnit.Framework.TestCaseAttribute("2019-01-08T07:01:00.000", "2019-01-01T08:00:00.001", "Century", "false", null)]
        [NUnit.Framework.TestCaseAttribute("2019-01-08T08:01:00.000", "2019-01-01T08:00:00.001", "Century", "false", null)]
        [NUnit.Framework.TestCaseAttribute("2019-02-01T07:01:00.000", "2019-01-01T08:00:00.001", "Century", "false", null)]
        [NUnit.Framework.TestCaseAttribute("2019-02-01T07:01:00.000", "2019-01-01T08:00:00.001", "Century", "false", null)]
        [NUnit.Framework.TestCaseAttribute("2019-01-01T07:01:00.000", "2018-01-01T08:00:00.001", "Century", "false", null)]
        [NUnit.Framework.TestCaseAttribute("2020-01-01T07:01:00.000", "2019-01-01T08:00:00.001", "Century", "false", null)]
        [NUnit.Framework.TestCaseAttribute("2029-01-01T07:01:00.000", "2019-02-01T08:00:00.001", "Century", "false", null)]
        [NUnit.Framework.TestCaseAttribute("2029-01-01T07:01:00.000", "2019-02-01T08:00:00.001", "Century", "false", null)]
        [NUnit.Framework.TestCaseAttribute("2029-01-01T07:01:00.000", "2019-01-01T08:00:00.001", "Century", "false", null)]
        [NUnit.Framework.TestCaseAttribute("2029-01-01T08:00:00.000", "2019-01-01T08:00:00.001", "Century", "false", null)]
        [NUnit.Framework.TestCaseAttribute("2029-01-01T08:00:00.000", "2019-01-01T08:00:00.000", "Century", "false", null)]
        [NUnit.Framework.TestCaseAttribute("2119-01-01T08:00:00.000", "2019-01-01T08:00:00.000", "Century", "true", null)]
        [NUnit.Framework.TestCaseAttribute("2119-01-01T08:00:00.000", "2019-06-01T07:00:00.000", "Century", "true", null)]
        [NUnit.Framework.TestCaseAttribute("2100-01-01T08:00:00.000", "2099-12-31T23:59:59.999", "Century", "true", null)]
        public virtual void DetermineIfADateIsAfterAnotherDateWithASpecificGranularity(string date1, string date2, string granularity, string result, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("determine if a date is after another date with a specific granularity", null, exampleTags);
#line 280
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 281
 testRunner.When(string.Format("I ask if {0} is after {1} with {2}", date1, date2, granularity), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 282
 testRunner.Then(string.Format("the answer should be {0}", result), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("determine if a date is before another date with a specific granularity")]
        [NUnit.Framework.TestCaseAttribute("2019-01-01T08:00:01.250", "2019-01-01T08:00:01.251", "Second", "false", null)]
        [NUnit.Framework.TestCaseAttribute("2019-01-01T08:00:01.001", "2019-01-01T08:00:01.999", "Second", "false", null)]
        [NUnit.Framework.TestCaseAttribute("2019-01-01T08:00:01.001", "2019-01-01T08:00:02.000", "Second", "true", null)]
        [NUnit.Framework.TestCaseAttribute("2019-01-01T08:00:00.001", "2019-01-01T08:01:00.000", "Second", "true", null)]
        [NUnit.Framework.TestCaseAttribute("2019-01-01T08:00:00.001", "2019-01-01T09:01:00.000", "Second", "true", null)]
        [NUnit.Framework.TestCaseAttribute("2019-01-01T08:00:00.001", "2019-01-02T08:01:00.000", "Second", "true", null)]
        [NUnit.Framework.TestCaseAttribute("2019-01-01T08:00:00.001", "2019-01-08T07:01:00.000", "Second", "true", null)]
        [NUnit.Framework.TestCaseAttribute("2019-01-01T08:00:00.001", "2019-01-08T08:01:00.000", "Second", "true", null)]
        [NUnit.Framework.TestCaseAttribute("2019-01-01T08:00:00.001", "2019-02-01T07:01:00.000", "Second", "true", null)]
        [NUnit.Framework.TestCaseAttribute("2019-01-01T08:00:00.001", "2019-02-01T07:01:00.000", "Second", "true", null)]
        [NUnit.Framework.TestCaseAttribute("2019-01-01T08:00:00.001", "2020-01-01T07:01:00.000", "Second", "true", null)]
        [NUnit.Framework.TestCaseAttribute("2019-02-01T08:00:00.001", "2029-01-01T07:01:00.000", "Second", "true", null)]
        [NUnit.Framework.TestCaseAttribute("2019-01-01T08:00:00.001", "2029-01-01T07:01:00.000", "Second", "true", null)]
        [NUnit.Framework.TestCaseAttribute("2019-01-01T08:00:01.250", "2019-01-01T08:00:01.251", "Minute", "false", null)]
        [NUnit.Framework.TestCaseAttribute("2019-01-01T08:00:01.001", "2019-01-01T08:00:01.999", "Minute", "false", null)]
        [NUnit.Framework.TestCaseAttribute("2019-01-01T08:00:01.001", "2019-01-01T08:00:02.000", "Minute", "false", null)]
        [NUnit.Framework.TestCaseAttribute("2019-01-01T08:00:00.001", "2019-01-01T08:01:00.000", "Minute", "true", null)]
        [NUnit.Framework.TestCaseAttribute("2019-01-01T08:00:00.000", "2019-01-01T08:01:00.000", "Minute", "true", null)]
        [NUnit.Framework.TestCaseAttribute("2019-01-01T08:00:00.001", "2019-01-01T09:01:00.000", "Minute", "true", null)]
        [NUnit.Framework.TestCaseAttribute("2019-01-01T08:00:00.001", "2019-01-02T08:01:00.000", "Minute", "true", null)]
        [NUnit.Framework.TestCaseAttribute("2019-01-01T08:00:00.001", "2019-01-08T07:01:00.000", "Minute", "true", null)]
        [NUnit.Framework.TestCaseAttribute("2019-01-01T08:00:00.001", "2019-01-08T08:01:00.000", "Minute", "true", null)]
        [NUnit.Framework.TestCaseAttribute("2019-01-01T08:00:00.001", "2019-02-01T07:01:00.000", "Minute", "true", null)]
        [NUnit.Framework.TestCaseAttribute("2019-01-01T08:00:00.001", "2019-02-01T07:01:00.000", "Minute", "true", null)]
        [NUnit.Framework.TestCaseAttribute("2019-01-01T08:00:00.001", "2020-01-01T07:01:00.000", "Minute", "true", null)]
        [NUnit.Framework.TestCaseAttribute("2019-02-01T08:00:00.001", "2029-01-01T07:01:00.000", "Minute", "true", null)]
        [NUnit.Framework.TestCaseAttribute("2019-01-01T08:00:00.001", "2029-01-01T07:01:00.000", "Minute", "true", null)]
        [NUnit.Framework.TestCaseAttribute("2019-01-01T08:00:01.250", "2019-01-01T08:00:01.251", "Hour", "false", null)]
        [NUnit.Framework.TestCaseAttribute("2019-01-01T08:00:01.001", "2019-01-01T08:00:01.999", "Hour", "false", null)]
        [NUnit.Framework.TestCaseAttribute("2019-01-01T08:00:01.001", "2019-01-01T08:00:02.000", "Hour", "false", null)]
        [NUnit.Framework.TestCaseAttribute("2019-01-01T08:00:00.001", "2019-01-01T08:01:00.000", "Hour", "false", null)]
        [NUnit.Framework.TestCaseAttribute("2019-01-01T08:00:00.001", "2019-01-01T09:01:00.000", "Hour", "true", null)]
        [NUnit.Framework.TestCaseAttribute("2019-01-01T08:00:00.000", "2019-01-01T09:01:00.000", "Hour", "true", null)]
        [NUnit.Framework.TestCaseAttribute("2019-01-01T08:00:00.001", "2019-01-02T08:01:00.000", "Hour", "true", null)]
        [NUnit.Framework.TestCaseAttribute("2019-01-01T08:00:00.001", "2019-01-08T07:01:00.000", "Hour", "true", null)]
        [NUnit.Framework.TestCaseAttribute("2019-01-01T08:00:00.001", "2019-01-08T08:01:00.000", "Hour", "true", null)]
        [NUnit.Framework.TestCaseAttribute("2019-01-01T08:00:00.001", "2019-02-01T07:01:00.000", "Hour", "true", null)]
        [NUnit.Framework.TestCaseAttribute("2019-01-01T08:00:00.001", "2019-02-01T07:01:00.000", "Hour", "true", null)]
        [NUnit.Framework.TestCaseAttribute("2019-01-01T08:00:00.001", "2020-01-01T07:01:00.000", "Hour", "true", null)]
        [NUnit.Framework.TestCaseAttribute("2019-02-01T08:00:00.001", "2029-01-01T07:01:00.000", "Hour", "true", null)]
        [NUnit.Framework.TestCaseAttribute("2019-01-01T08:00:00.001", "2029-01-01T07:01:00.000", "Hour", "true", null)]
        [NUnit.Framework.TestCaseAttribute("2019-01-01T08:00:01.250", "2019-01-01T08:00:01.251", "Day", "false", null)]
        [NUnit.Framework.TestCaseAttribute("2019-01-01T08:00:01.001", "2019-01-01T08:00:01.999", "Day", "false", null)]
        [NUnit.Framework.TestCaseAttribute("2019-01-01T08:00:01.001", "2019-01-01T08:00:02.000", "Day", "false", null)]
        [NUnit.Framework.TestCaseAttribute("2019-01-01T08:00:00.001", "2019-01-01T08:01:00.000", "Day", "false", null)]
        [NUnit.Framework.TestCaseAttribute("2019-01-01T08:00:00.001", "2019-01-01T09:01:00.000", "Day", "false", null)]
        [NUnit.Framework.TestCaseAttribute("2019-01-01T08:00:00.001", "2019-01-02T08:01:00.000", "Day", "true", null)]
        [NUnit.Framework.TestCaseAttribute("2019-01-01T08:00:00.000", "2019-01-02T08:01:00.000", "Day", "true", null)]
        [NUnit.Framework.TestCaseAttribute("2019-01-01T08:00:00.001", "2019-01-08T07:01:00.000", "Day", "true", null)]
        [NUnit.Framework.TestCaseAttribute("2019-01-01T08:00:00.001", "2019-01-08T08:01:00.000", "Day", "true", null)]
        [NUnit.Framework.TestCaseAttribute("2019-01-01T08:00:00.001", "2019-02-01T07:01:00.000", "Day", "true", null)]
        [NUnit.Framework.TestCaseAttribute("2019-01-01T08:00:00.001", "2019-02-01T07:01:00.000", "Day", "true", null)]
        [NUnit.Framework.TestCaseAttribute("2019-01-01T08:00:00.001", "2020-01-01T07:01:00.000", "Day", "true", null)]
        [NUnit.Framework.TestCaseAttribute("2019-02-01T08:00:00.001", "2029-01-01T07:01:00.000", "Day", "true", null)]
        [NUnit.Framework.TestCaseAttribute("2019-01-01T08:00:00.001", "2029-01-01T07:01:00.000", "Day", "true", null)]
        [NUnit.Framework.TestCaseAttribute("2019-01-01T08:00:01.250", "2019-01-01T08:00:01.251", "Week", "false", null)]
        [NUnit.Framework.TestCaseAttribute("2019-01-01T08:00:01.001", "2019-01-01T08:00:01.999", "Week", "false", null)]
        [NUnit.Framework.TestCaseAttribute("2019-01-01T08:00:01.001", "2019-01-01T08:00:02.000", "Week", "false", null)]
        [NUnit.Framework.TestCaseAttribute("2019-01-01T08:00:00.001", "2019-01-01T08:01:00.000", "Week", "false", null)]
        [NUnit.Framework.TestCaseAttribute("2019-01-01T08:00:00.001", "2019-01-01T09:01:00.000", "Week", "false", null)]
        [NUnit.Framework.TestCaseAttribute("2019-01-01T08:00:00.001", "2019-01-02T08:01:00.000", "Week", "false", null)]
        [NUnit.Framework.TestCaseAttribute("2019-01-01T08:00:00.001", "2019-01-08T07:01:00.000", "Week", "true", null)]
        [NUnit.Framework.TestCaseAttribute("2019-01-01T08:00:00.001", "2019-01-08T08:01:00.000", "Week", "true", null)]
        [NUnit.Framework.TestCaseAttribute("2019-01-01T08:00:00.000", "2019-01-08T08:01:00.000", "Week", "true", null)]
        [NUnit.Framework.TestCaseAttribute("2019-01-01T08:00:00.001", "2019-01-08T08:01:00.000", "Week", "true", null)]
        [NUnit.Framework.TestCaseAttribute("2019-01-01T08:00:00.001", "2019-02-01T07:01:00.000", "Week", "true", null)]
        [NUnit.Framework.TestCaseAttribute("2019-01-01T08:00:00.001", "2019-02-01T07:01:00.000", "Week", "true", null)]
        [NUnit.Framework.TestCaseAttribute("2019-01-01T08:00:00.001", "2020-01-01T07:01:00.000", "Week", "true", null)]
        [NUnit.Framework.TestCaseAttribute("2019-02-01T08:00:00.001", "2029-01-01T07:01:00.000", "Week", "true", null)]
        [NUnit.Framework.TestCaseAttribute("2019-01-01T08:00:00.001", "2029-01-01T07:01:00.000", "Week", "true", null)]
        [NUnit.Framework.TestCaseAttribute("2019-01-01T08:00:01.250", "2019-01-01T08:00:01.251", "Month", "false", null)]
        [NUnit.Framework.TestCaseAttribute("2019-01-01T08:00:01.001", "2019-01-01T08:00:01.999", "Month", "false", null)]
        [NUnit.Framework.TestCaseAttribute("2019-01-01T08:00:01.001", "2019-01-01T08:00:02.000", "Month", "false", null)]
        [NUnit.Framework.TestCaseAttribute("2019-01-01T08:00:00.001", "2019-01-01T08:01:00.000", "Month", "false", null)]
        [NUnit.Framework.TestCaseAttribute("2019-01-01T08:00:00.001", "2019-01-01T09:01:00.000", "Month", "false", null)]
        [NUnit.Framework.TestCaseAttribute("2019-01-01T08:00:00.001", "2019-01-02T08:01:00.000", "Month", "false", null)]
        [NUnit.Framework.TestCaseAttribute("2019-01-01T08:00:00.001", "2019-01-08T07:01:00.000", "Month", "false", null)]
        [NUnit.Framework.TestCaseAttribute("2019-01-01T08:00:00.001", "2019-01-08T08:01:00.000", "Month", "false", null)]
        [NUnit.Framework.TestCaseAttribute("2019-01-01T08:00:00.001", "2019-02-01T07:01:00.000", "Month", "true", null)]
        [NUnit.Framework.TestCaseAttribute("2019-01-01T08:00:00.001", "2019-02-01T08:00:00.000", "Month", "true", null)]
        [NUnit.Framework.TestCaseAttribute("2019-01-01T08:00:00.000", "2019-02-01T08:00:00.000", "Month", "true", null)]
        [NUnit.Framework.TestCaseAttribute("2019-01-01T08:00:01.250", "2019-01-01T08:00:01.251", "Year", "false", null)]
        [NUnit.Framework.TestCaseAttribute("2019-01-01T08:00:01.001", "2019-01-01T08:00:01.999", "Year", "false", null)]
        [NUnit.Framework.TestCaseAttribute("2019-01-01T08:00:01.001", "2019-01-01T08:00:02.000", "Year", "false", null)]
        [NUnit.Framework.TestCaseAttribute("2019-01-01T08:00:00.001", "2019-01-01T08:01:00.000", "Year", "false", null)]
        [NUnit.Framework.TestCaseAttribute("2019-01-01T08:00:00.001", "2019-01-01T09:01:00.000", "Year", "false", null)]
        [NUnit.Framework.TestCaseAttribute("2019-01-01T08:00:00.001", "2019-01-02T08:01:00.000", "Year", "false", null)]
        [NUnit.Framework.TestCaseAttribute("2019-01-01T08:00:00.001", "2019-01-08T07:01:00.000", "Year", "false", null)]
        [NUnit.Framework.TestCaseAttribute("2019-01-01T08:00:00.001", "2019-01-08T08:01:00.000", "Year", "false", null)]
        [NUnit.Framework.TestCaseAttribute("2019-01-01T08:00:00.001", "2019-02-01T07:01:00.000", "Year", "false", null)]
        [NUnit.Framework.TestCaseAttribute("2019-01-01T08:00:00.001", "2019-02-01T07:01:00.000", "Year", "false", null)]
        [NUnit.Framework.TestCaseAttribute("2019-01-01T08:00:00.001", "2020-01-01T07:01:00.000", "Year", "true", null)]
        [NUnit.Framework.TestCaseAttribute("2019-01-01T08:00:00.001", "2020-01-01T08:00:00.000", "Year", "true", null)]
        [NUnit.Framework.TestCaseAttribute("2019-01-01T08:00:00.000", "2020-01-01T08:00:00.000", "Year", "true", null)]
        [NUnit.Framework.TestCaseAttribute("2019-02-01T08:00:00.001", "2029-01-01T07:01:00.000", "Year", "true", null)]
        [NUnit.Framework.TestCaseAttribute("2019-01-01T08:00:00.001", "2029-01-01T07:01:00.000", "Year", "true", null)]
        [NUnit.Framework.TestCaseAttribute("2019-01-01T08:00:01.250", "2019-01-01T08:00:01.251", "Decade", "false", null)]
        [NUnit.Framework.TestCaseAttribute("2019-01-01T08:00:01.001", "2019-01-01T08:00:01.999", "Decade", "false", null)]
        [NUnit.Framework.TestCaseAttribute("2019-01-01T08:00:01.001", "2019-01-01T08:00:02.000", "Decade", "false", null)]
        [NUnit.Framework.TestCaseAttribute("2019-01-01T08:00:00.001", "2019-01-01T08:01:00.000", "Decade", "false", null)]
        [NUnit.Framework.TestCaseAttribute("2019-01-01T08:00:00.001", "2019-01-01T09:01:00.000", "Decade", "false", null)]
        [NUnit.Framework.TestCaseAttribute("2019-01-01T08:00:00.001", "2019-01-02T08:01:00.000", "Decade", "false", null)]
        [NUnit.Framework.TestCaseAttribute("2019-01-01T08:00:00.001", "2019-01-08T07:01:00.000", "Decade", "false", null)]
        [NUnit.Framework.TestCaseAttribute("2019-01-01T08:00:00.001", "2019-01-08T08:01:00.000", "Decade", "false", null)]
        [NUnit.Framework.TestCaseAttribute("2019-01-01T08:00:00.001", "2019-02-01T07:01:00.000", "Decade", "false", null)]
        [NUnit.Framework.TestCaseAttribute("2019-01-01T08:00:00.001", "2019-02-01T07:01:00.000", "Decade", "false", null)]
        [NUnit.Framework.TestCaseAttribute("2018-01-01T08:00:00.001", "2019-01-01T07:01:00.000", "Decade", "false", null)]
        [NUnit.Framework.TestCaseAttribute("2019-01-01T08:00:00.001", "2020-01-01T07:01:00.000", "Decade", "true", null)]
        [NUnit.Framework.TestCaseAttribute("2019-02-01T08:00:00.001", "2029-01-01T07:01:00.000", "Decade", "true", null)]
        [NUnit.Framework.TestCaseAttribute("2019-02-01T08:00:00.001", "2029-01-01T07:01:00.000", "Decade", "true", null)]
        [NUnit.Framework.TestCaseAttribute("2019-01-01T08:00:00.001", "2029-01-01T07:01:00.000", "Decade", "true", null)]
        [NUnit.Framework.TestCaseAttribute("2019-01-01T08:00:00.001", "2029-01-01T08:00:00.000", "Decade", "true", null)]
        [NUnit.Framework.TestCaseAttribute("2019-01-01T08:00:00.000", "2029-01-01T08:00:00.000", "Decade", "true", null)]
        [NUnit.Framework.TestCaseAttribute("2019-01-01T08:00:01.250", "2019-01-01T08:00:01.251", "Century", "false", null)]
        [NUnit.Framework.TestCaseAttribute("2019-01-01T08:00:01.001", "2019-01-01T08:00:01.999", "Century", "false", null)]
        [NUnit.Framework.TestCaseAttribute("2019-01-01T08:00:01.001", "2019-01-01T08:00:02.000", "Century", "false", null)]
        [NUnit.Framework.TestCaseAttribute("2019-01-01T08:00:00.001", "2019-01-01T08:01:00.000", "Century", "false", null)]
        [NUnit.Framework.TestCaseAttribute("2019-01-01T08:00:00.001", "2019-01-01T09:01:00.000", "Century", "false", null)]
        [NUnit.Framework.TestCaseAttribute("2019-01-01T08:00:00.001", "2019-01-02T08:01:00.000", "Century", "false", null)]
        [NUnit.Framework.TestCaseAttribute("2019-01-01T08:00:00.001", "2019-01-08T07:01:00.000", "Century", "false", null)]
        [NUnit.Framework.TestCaseAttribute("2019-01-01T08:00:00.001", "2019-01-08T08:01:00.000", "Century", "false", null)]
        [NUnit.Framework.TestCaseAttribute("2019-01-01T08:00:00.001", "2019-02-01T07:01:00.000", "Century", "false", null)]
        [NUnit.Framework.TestCaseAttribute("2019-01-01T08:00:00.001", "2019-02-01T07:01:00.000", "Century", "false", null)]
        [NUnit.Framework.TestCaseAttribute("2018-01-01T08:00:00.001", "2019-01-01T07:01:00.000", "Century", "false", null)]
        [NUnit.Framework.TestCaseAttribute("2019-01-01T08:00:00.001", "2020-01-01T07:01:00.000", "Century", "false", null)]
        [NUnit.Framework.TestCaseAttribute("2019-02-01T08:00:00.001", "2029-01-01T07:01:00.000", "Century", "false", null)]
        [NUnit.Framework.TestCaseAttribute("2019-02-01T08:00:00.001", "2029-01-01T07:01:00.000", "Century", "false", null)]
        [NUnit.Framework.TestCaseAttribute("2019-01-01T08:00:00.001", "2029-01-01T07:01:00.000", "Century", "false", null)]
        [NUnit.Framework.TestCaseAttribute("2019-01-01T08:00:00.001", "2029-01-01T08:00:00.000", "Century", "false", null)]
        [NUnit.Framework.TestCaseAttribute("2019-01-01T08:00:00.000", "2029-01-01T08:00:00.000", "Century", "false", null)]
        [NUnit.Framework.TestCaseAttribute("2019-01-01T08:00:00.000", "2119-01-01T08:00:00.000", "Century", "true", null)]
        [NUnit.Framework.TestCaseAttribute("2019-06-01T07:00:00.000", "2119-01-01T08:00:00.000", "Century", "true", null)]
        [NUnit.Framework.TestCaseAttribute("2099-12-31T23:59:59.999", "2100-01-01T08:00:00.000", "Century", "true", null)]
        public virtual void DetermineIfADateIsBeforeAnotherDateWithASpecificGranularity(string date1, string date2, string granularity, string result, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("determine if a date is before another date with a specific granularity", null, exampleTags);
#line 419
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 420
 testRunner.When(string.Format("I ask if {0} is before {1} with {2}", date1, date2, granularity), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 421
 testRunner.Then(string.Format("the answer should be {0}", result), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
