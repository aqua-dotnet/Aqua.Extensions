// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:3.0.0.0
//      SpecFlow Generator Version:3.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Corvus.Extensions.Specs.TraversalExtensionsFeatures
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("TraversalExtensions")]
    public partial class TraversalExtensionsFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "TraversalExtensions.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "TraversalExtensions", "\tIn order to manipulate enumerations\r\n\tAs a developer\r\n\tI want a variety of Linq " +
                    "extensions", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("A collection is enumerated with foreach")]
        public virtual void ACollectionIsEnumeratedWithForeach()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A collection is enumerated with foreach", null, ((string[])(null)));
#line 6
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Collection",
                        "Value"});
            table1.AddRow(new string[] {
                        "1",
                        "1"});
            table1.AddRow(new string[] {
                        "1",
                        "2"});
            table1.AddRow(new string[] {
                        "1",
                        "3"});
            table1.AddRow(new string[] {
                        "1",
                        "4"});
            table1.AddRow(new string[] {
                        "1",
                        "5"});
#line 7
 testRunner.Given("the following collections", ((string)(null)), table1, "Given ");
#line 14
 testRunner.When("I enumerate collection 1 with foreach add to another collection", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 15
 testRunner.Then("Collection 2 should match Collection 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("A collection is enumerated with foreach with no action")]
        public virtual void ACollectionIsEnumeratedWithForeachWithNoAction()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A collection is enumerated with foreach with no action", null, ((string[])(null)));
#line 17
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Collection",
                        "Value"});
            table2.AddRow(new string[] {
                        "1",
                        "1"});
            table2.AddRow(new string[] {
                        "1",
                        "2"});
            table2.AddRow(new string[] {
                        "1",
                        "3"});
            table2.AddRow(new string[] {
                        "1",
                        "4"});
            table2.AddRow(new string[] {
                        "1",
                        "5"});
#line 18
 testRunner.Given("the following collections", ((string)(null)), table2, "Given ");
#line 25
 testRunner.When("I enumerate collection 1 with foreach with no action", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 26
 testRunner.Then("an ArgumentNullException should be thrown for parameter \"onNext\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("A collection is enumerated with foreachatindex")]
        public virtual void ACollectionIsEnumeratedWithForeachatindex()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A collection is enumerated with foreachatindex", null, ((string[])(null)));
#line 28
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Collection",
                        "Value"});
            table3.AddRow(new string[] {
                        "1",
                        "1"});
            table3.AddRow(new string[] {
                        "1",
                        "2"});
            table3.AddRow(new string[] {
                        "1",
                        "3"});
            table3.AddRow(new string[] {
                        "1",
                        "4"});
            table3.AddRow(new string[] {
                        "1",
                        "5"});
#line 29
 testRunner.Given("the following collections", ((string)(null)), table3, "Given ");
#line 36
 testRunner.When("I enumerate collection 1 with foreachatindex add to another collection", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 37
 testRunner.Then("Collection 2 should match Collection 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 38
 testRunner.And("each index should be passed in order", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("A collection is enumerated with foreachatindex with no action")]
        public virtual void ACollectionIsEnumeratedWithForeachatindexWithNoAction()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A collection is enumerated with foreachatindex with no action", null, ((string[])(null)));
#line 40
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Collection",
                        "Value"});
            table4.AddRow(new string[] {
                        "1",
                        "1"});
            table4.AddRow(new string[] {
                        "1",
                        "2"});
            table4.AddRow(new string[] {
                        "1",
                        "3"});
            table4.AddRow(new string[] {
                        "1",
                        "4"});
            table4.AddRow(new string[] {
                        "1",
                        "5"});
#line 41
 testRunner.Given("the following collections", ((string)(null)), table4, "Given ");
#line 48
 testRunner.When("I enumerate collection 1 with foreachatindex with no action", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 49
 testRunner.Then("an ArgumentNullException should be thrown for parameter \"action\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("A collection is enumerated with foreachfailend")]
        public virtual void ACollectionIsEnumeratedWithForeachfailend()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A collection is enumerated with foreachfailend", null, ((string[])(null)));
#line 51
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "Collection",
                        "Value"});
            table5.AddRow(new string[] {
                        "1",
                        "1"});
            table5.AddRow(new string[] {
                        "1",
                        "2"});
            table5.AddRow(new string[] {
                        "1",
                        "3"});
            table5.AddRow(new string[] {
                        "1",
                        "4"});
            table5.AddRow(new string[] {
                        "1",
                        "5"});
#line 52
 testRunner.Given("the following collections", ((string)(null)), table5, "Given ");
#line 59
 testRunner.When("I enumerate collection 1 with foreachfailend add to another collection", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 60
 testRunner.Then("Collection 2 should match Collection 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("A collection is enumerated with foreachfailend with a failing action")]
        public virtual void ACollectionIsEnumeratedWithForeachfailendWithAFailingAction()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A collection is enumerated with foreachfailend with a failing action", null, ((string[])(null)));
#line 62
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "Collection",
                        "Value"});
            table6.AddRow(new string[] {
                        "1",
                        "1"});
            table6.AddRow(new string[] {
                        "1",
                        "2"});
            table6.AddRow(new string[] {
                        "1",
                        "3"});
            table6.AddRow(new string[] {
                        "1",
                        "4"});
            table6.AddRow(new string[] {
                        "1",
                        "5"});
#line 63
 testRunner.Given("the following collections", ((string)(null)), table6, "Given ");
#line 70
 testRunner.When("I enumerate collection 1 with foreachfailend with a failing action", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 71
 testRunner.Then("an Aggregate exception should be thrown containing 5 \"InvalidOperationException\" " +
                    "instances", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("A collection is enumerated with foreachfailend with no action")]
        public virtual void ACollectionIsEnumeratedWithForeachfailendWithNoAction()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A collection is enumerated with foreachfailend with no action", null, ((string[])(null)));
#line 73
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "Collection",
                        "Value"});
            table7.AddRow(new string[] {
                        "1",
                        "1"});
            table7.AddRow(new string[] {
                        "1",
                        "2"});
            table7.AddRow(new string[] {
                        "1",
                        "3"});
            table7.AddRow(new string[] {
                        "1",
                        "4"});
            table7.AddRow(new string[] {
                        "1",
                        "5"});
#line 74
 testRunner.Given("the following collections", ((string)(null)), table7, "Given ");
#line 81
 testRunner.When("I enumerate collection 1 with foreachfailend with no action", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 82
 testRunner.Then("an ArgumentNullException should be thrown for parameter \"action\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("A null collection is enumerated with foreach")]
        public virtual void ANullCollectionIsEnumeratedWithForeach()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A null collection is enumerated with foreach", null, ((string[])(null)));
#line 84
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 85
 testRunner.When("I enumerate a null collection with foreach", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 86
 testRunner.Then("an ArgumentNullException should be thrown for parameter \"source\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("A null collection is enumerated with foreachfailend")]
        public virtual void ANullCollectionIsEnumeratedWithForeachfailend()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A null collection is enumerated with foreachfailend", null, ((string[])(null)));
#line 88
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 89
 testRunner.When("I enumerate a null collection with foreachfailend", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 90
 testRunner.Then("a NullReferenceException should be thrown", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("A null collection is enumerated with foreachatindex")]
        public virtual void ANullCollectionIsEnumeratedWithForeachatindex()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A null collection is enumerated with foreachatindex", null, ((string[])(null)));
#line 92
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 93
 testRunner.When("I enumerate a null collection with foreachatindex", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 94
 testRunner.Then("a NullReferenceException should be thrown", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("A collection is enumerated with foreachasync")]
        public virtual void ACollectionIsEnumeratedWithForeachasync()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A collection is enumerated with foreachasync", null, ((string[])(null)));
#line 96
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "Collection",
                        "Value"});
            table8.AddRow(new string[] {
                        "1",
                        "1"});
            table8.AddRow(new string[] {
                        "1",
                        "2"});
            table8.AddRow(new string[] {
                        "1",
                        "3"});
            table8.AddRow(new string[] {
                        "1",
                        "4"});
            table8.AddRow(new string[] {
                        "1",
                        "5"});
#line 97
 testRunner.Given("the following collections", ((string)(null)), table8, "Given ");
#line 104
 testRunner.When("I enumerate collection 1 with foreachasync add to another collection", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 105
 testRunner.Then("Collection 2 should match Collection 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("A collection is enumerated with foreachasync with no action")]
        public virtual void ACollectionIsEnumeratedWithForeachasyncWithNoAction()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A collection is enumerated with foreachasync with no action", null, ((string[])(null)));
#line 107
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                        "Collection",
                        "Value"});
            table9.AddRow(new string[] {
                        "1",
                        "1"});
            table9.AddRow(new string[] {
                        "1",
                        "2"});
            table9.AddRow(new string[] {
                        "1",
                        "3"});
            table9.AddRow(new string[] {
                        "1",
                        "4"});
            table9.AddRow(new string[] {
                        "1",
                        "5"});
#line 108
 testRunner.Given("the following collections", ((string)(null)), table9, "Given ");
#line 115
 testRunner.When("I enumerate collection 1 with foreachasync with no action", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 116
 testRunner.Then("an ArgumentNullException should be thrown for parameter \"action\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("A null collection is enumerated with foreachasync")]
        public virtual void ANullCollectionIsEnumeratedWithForeachasync()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A null collection is enumerated with foreachasync", null, ((string[])(null)));
#line 118
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 119
 testRunner.When("I enumerate a null collection with foreachasync", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 120
 testRunner.Then("a NullReferenceException should be thrown", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("A collection is enumerated with foreachfailendasync")]
        public virtual void ACollectionIsEnumeratedWithForeachfailendasync()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A collection is enumerated with foreachfailendasync", null, ((string[])(null)));
#line 122
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                        "Collection",
                        "Value"});
            table10.AddRow(new string[] {
                        "1",
                        "1"});
            table10.AddRow(new string[] {
                        "1",
                        "2"});
            table10.AddRow(new string[] {
                        "1",
                        "3"});
            table10.AddRow(new string[] {
                        "1",
                        "4"});
            table10.AddRow(new string[] {
                        "1",
                        "5"});
#line 123
 testRunner.Given("the following collections", ((string)(null)), table10, "Given ");
#line 130
 testRunner.When("I enumerate collection 1 with foreachfailendasync add to another collection", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 131
 testRunner.Then("Collection 2 should match Collection 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("A collection is enumerated with foreachfailendasync with a failing action")]
        public virtual void ACollectionIsEnumeratedWithForeachfailendasyncWithAFailingAction()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A collection is enumerated with foreachfailendasync with a failing action", null, ((string[])(null)));
#line 133
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                        "Collection",
                        "Value"});
            table11.AddRow(new string[] {
                        "1",
                        "1"});
            table11.AddRow(new string[] {
                        "1",
                        "2"});
            table11.AddRow(new string[] {
                        "1",
                        "3"});
            table11.AddRow(new string[] {
                        "1",
                        "4"});
            table11.AddRow(new string[] {
                        "1",
                        "5"});
#line 134
 testRunner.Given("the following collections", ((string)(null)), table11, "Given ");
#line 141
 testRunner.When("I enumerate collection 1 with foreachfailendasync with a failing action", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 142
 testRunner.Then("an Aggregate exception should be thrown containing 5 \"InvalidOperationException\" " +
                    "instances", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("A collection is enumerated with foreachfailendasync with no action")]
        public virtual void ACollectionIsEnumeratedWithForeachfailendasyncWithNoAction()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A collection is enumerated with foreachfailendasync with no action", null, ((string[])(null)));
#line 144
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                        "Collection",
                        "Value"});
            table12.AddRow(new string[] {
                        "1",
                        "1"});
            table12.AddRow(new string[] {
                        "1",
                        "2"});
            table12.AddRow(new string[] {
                        "1",
                        "3"});
            table12.AddRow(new string[] {
                        "1",
                        "4"});
            table12.AddRow(new string[] {
                        "1",
                        "5"});
#line 145
 testRunner.Given("the following collections", ((string)(null)), table12, "Given ");
#line 152
 testRunner.When("I enumerate collection 1 with foreachfailendasync with no action", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 153
 testRunner.Then("an ArgumentNullException should be thrown for parameter \"action\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("A null collection is enumerated with foreachfailendasync")]
        public virtual void ANullCollectionIsEnumeratedWithForeachfailendasync()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A null collection is enumerated with foreachfailendasync", null, ((string[])(null)));
#line 155
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 156
 testRunner.When("I enumerate a null collection with foreachfailendasync", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 157
 testRunner.Then("a NullReferenceException should be thrown", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("A collection is enumerated with foreachatindexasync")]
        public virtual void ACollectionIsEnumeratedWithForeachatindexasync()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A collection is enumerated with foreachatindexasync", null, ((string[])(null)));
#line 160
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                        "Collection",
                        "Value"});
            table13.AddRow(new string[] {
                        "1",
                        "1"});
            table13.AddRow(new string[] {
                        "1",
                        "2"});
            table13.AddRow(new string[] {
                        "1",
                        "3"});
            table13.AddRow(new string[] {
                        "1",
                        "4"});
            table13.AddRow(new string[] {
                        "1",
                        "5"});
#line 161
 testRunner.Given("the following collections", ((string)(null)), table13, "Given ");
#line 168
 testRunner.When("I enumerate collection 1 with foreachatindexasync add to another collection", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 169
 testRunner.Then("Collection 2 should match Collection 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 170
 testRunner.And("each index should be passed in order", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("A collection is enumerated with foreachatindexasync with no action")]
        public virtual void ACollectionIsEnumeratedWithForeachatindexasyncWithNoAction()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A collection is enumerated with foreachatindexasync with no action", null, ((string[])(null)));
#line 172
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table14 = new TechTalk.SpecFlow.Table(new string[] {
                        "Collection",
                        "Value"});
            table14.AddRow(new string[] {
                        "1",
                        "1"});
            table14.AddRow(new string[] {
                        "1",
                        "2"});
            table14.AddRow(new string[] {
                        "1",
                        "3"});
            table14.AddRow(new string[] {
                        "1",
                        "4"});
            table14.AddRow(new string[] {
                        "1",
                        "5"});
#line 173
 testRunner.Given("the following collections", ((string)(null)), table14, "Given ");
#line 180
 testRunner.When("I enumerate collection 1 with foreachatindexasync with no action", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 181
 testRunner.Then("an ArgumentNullException should be thrown for parameter \"action\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("A null collection is enumerated with foreachatindexasync")]
        public virtual void ANullCollectionIsEnumeratedWithForeachatindexasync()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A null collection is enumerated with foreachatindexasync", null, ((string[])(null)));
#line 183
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 184
 testRunner.When("I enumerate a null collection with foreachatindexasync", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 185
 testRunner.Then("a NullReferenceException should be thrown", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("When you merge two dictionaries")]
        public virtual void WhenYouMergeTwoDictionaries()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("When you merge two dictionaries", null, ((string[])(null)));
#line 188
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table15 = new TechTalk.SpecFlow.Table(new string[] {
                        "Dictionary",
                        "Key",
                        "Value"});
            table15.AddRow(new string[] {
                        "1",
                        "1",
                        "3"});
            table15.AddRow(new string[] {
                        "1",
                        "4",
                        "1"});
            table15.AddRow(new string[] {
                        "1",
                        "5",
                        "2"});
            table15.AddRow(new string[] {
                        "2",
                        "1",
                        "1"});
            table15.AddRow(new string[] {
                        "2",
                        "2",
                        "3"});
            table15.AddRow(new string[] {
                        "2",
                        "3",
                        "5"});
            table15.AddRow(new string[] {
                        "2",
                        "4",
                        "3"});
            table15.AddRow(new string[] {
                        "3",
                        "1",
                        "1"});
            table15.AddRow(new string[] {
                        "3",
                        "2",
                        "3"});
            table15.AddRow(new string[] {
                        "3",
                        "3",
                        "5"});
            table15.AddRow(new string[] {
                        "3",
                        "4",
                        "3"});
            table15.AddRow(new string[] {
                        "3",
                        "5",
                        "2"});
#line 189
 testRunner.Given("the following dictionaries", ((string)(null)), table15, "Given ");
#line 203
 testRunner.When("I merge Dictionary 1 with Dictionary 2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 204
 testRunner.Then("Dictionary 2 should equal Dictionary 3", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
